<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VigiothCapital.QuantTrader.Messaging</name>
    </assembly>
    <members>
        <member name="T:VigiothCapital.QuantTrader.Messaging.EventMessagingHandler">
            <summary>
            Desktop implementation of messaging system for Lean Engine
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Messaging.EventMessagingHandler.HasSubscribers">
            <summary>
            Gets or sets whether this messaging handler has any current subscribers.
            When set to false, messages won't be sent.
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Messaging.EventMessagingHandler.Initialize">
            <summary>
            Initialize the Messaging System Plugin. 
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Messaging.EventMessagingHandler.SetAuthentication(VigiothCapital.QuantTrader.Packets.AlgorithmNodePacket)">
            <summary>
            Set the user communication channel
            </summary>
            <param name="job"></param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Messaging.EventMessagingHandler.Send(VigiothCapital.QuantTrader.Packets.Packet)">
            <summary>
            Send any message with a base type of Packet.
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Messaging.EventMessagingHandler.SendNotification(VigiothCapital.QuantTrader.Notifications.Notification)">
            <summary>
            Send any notification with a base type of Notification.
            </summary>
            <param name="notification">The notification to be sent.</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Messaging.EventMessagingHandler.ProcessPacket(VigiothCapital.QuantTrader.Packets.Packet)">
            <summary>
            Packet processing implementation
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Messaging.EventMessagingHandler.OnDebugEvent(VigiothCapital.QuantTrader.Packets.DebugPacket)">
            <summary>
            Raise a debug event safely
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Messaging.EventMessagingHandler.OnConsumerReadyEvent">
            <summary>
            Handler for consumer ready code.
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Messaging.EventMessagingHandler.OnLogEvent(VigiothCapital.QuantTrader.Packets.LogPacket)">
            <summary>
            Raise a log event safely
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Messaging.EventMessagingHandler.OnHandledErrorEvent(VigiothCapital.QuantTrader.Packets.HandledErrorPacket)">
            <summary>
            Raise a handled error event safely
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Messaging.EventMessagingHandler.OnRuntimeErrorEvent(VigiothCapital.QuantTrader.Packets.RuntimeErrorPacket)">
            <summary>
            Raise runtime error safely
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Messaging.EventMessagingHandler.OnBacktestResultEvent(VigiothCapital.QuantTrader.Packets.BacktestResultPacket)">
            <summary>
            Raise a backtest result event safely.
            </summary>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Messaging.Messaging">
            <summary>
            Local/desktop implementation of messaging system for Lean Engine.
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Messaging.Messaging.HasSubscribers">
            <summary>
            This implementation ignores the <seealso cref="P:VigiothCapital.QuantTrader.Messaging.Messaging.HasSubscribers"/> flag and
            instead will always write to the log.
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Messaging.Messaging.Initialize">
            <summary>
            Initialize the messaging system
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Messaging.Messaging.SetAuthentication(VigiothCapital.QuantTrader.Packets.AlgorithmNodePacket)">
            <summary>
            Set the messaging channel
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Messaging.Messaging.Send(VigiothCapital.QuantTrader.Packets.Packet)">
            <summary>
            Send a generic base packet without processing
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Messaging.Messaging.SendNotification(VigiothCapital.QuantTrader.Notifications.Notification)">
            <summary>
            Send any notification with a base type of Notification.
            </summary>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Messaging.StreamingApi">
            <summary>
            Provides a common transmit method for utilizing the QC streaming API
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.Messaging.StreamingApi.IsEnabled">
            <summary>
            Gets a flag indicating whether or not the streaming api is enabled
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Messaging.StreamingApi.Transmit(System.Int32,System.String,VigiothCapital.QuantTrader.Packets.Packet)">
            <summary>
            Send a message to the VigiothCapital.QuantTrader Chart Streaming API.
            </summary>
            <param name="userId">User Id</param>
            <param name="apiToken">API token for authentication</param>
            <param name="packet">Packet to transmit</param>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Messaging.StreamingApi.Response">
            <summary>
            Response object from the Streaming API.
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.Messaging.StreamingApi.Response.Type">
            <summary>
            Type of response from the streaming api.
            </summary>
            <remarks>success or error</remarks>
        </member>
        <member name="F:VigiothCapital.QuantTrader.Messaging.StreamingApi.Response.Message">
            <summary>
            Message description of the error or success state.
            </summary>
        </member>
    </members>
</doc>
