<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VigiothCapital.QuantTrader</name>
    </assembly>
    <members>
        <member name="T:VigiothCapital.QuantTrader.Globals">
            <summary>
            Provides application level constant values
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Globals.DataFolder">
            <summary>
            The root directory of the data folder for this application
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Globals.Reset">
            <summary>
            Resets global values with the Config data.
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.Globals.Cache">
            <summary>
            The directory used for storing downloaded remote files
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Globals.Version">
            <summary>
            The version of lean
            </summary>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Currencies">
            <summary>
            Provides commonly used currency pairs and symbols
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.Currencies.CurrencyPairs">
            <summary>
            Gets the listing of currently supported currency pairs.
            </summary>
            <remarks>
            This listing should be in sync with the data available at: https://www.quantconnect.com/data/FOREX#2.1.1
            It must include all currency pairs needed to resolve quote currencies in <see cref="M:VigiothCapital.QuantTrader.Securities.Cash.EnsureCurrencyDataFeed(VigiothCapital.QuantTrader.Securities.SecurityManager,VigiothCapital.QuantTrader.Data.SubscriptionManager,VigiothCapital.QuantTrader.Securities.MarketHoursDatabase,VigiothCapital.QuantTrader.Securities.SymbolPropertiesDatabase,System.Collections.Generic.IReadOnlyDictionary{VigiothCapital.QuantTrader.SecurityType,System.String},VigiothCapital.QuantTrader.Securities.CashBook)"/>
            </remarks>
        </member>
        <member name="F:VigiothCapital.QuantTrader.Currencies.CurrencySymbols">
            <summary>
            A mapping of currency codes to their display symbols
            </summary>
            <remarks>
            Now used by Forex and CFD, should probably be moved out into its own class
            </remarks>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Field">
            <summary>
            Provides static properties to be used as selectors with the indicator system
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Field.Open">
            <summary>
            Gets a selector that selects the Open value
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Field.High">
            <summary>
            Gets a selector that selects the High value
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Field.Low">
            <summary>
            Gets a selector that selects the Low value
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Field.Close">
            <summary>
            Gets a selector that selects the Close value
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Field.Average">
            <summary>
            Defines an average price that is equal to (O + H + L + C) / 4
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Field.Median">
            <summary>
            Defines an average price that is equal to (H + L) / 2
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Field.Typical">
            <summary>
            Defines an average price that is equal to (H + L + C) / 3
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Field.Weighted">
            <summary>
            Defines an average price that is equal to (H + L + 2*C) / 4
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Field.SevenBar">
            <summary>
            Defines an average price that is equal to (2*O + H + L + 3*C)/7
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Field.Volume">
            <summary>
            Gets a selector that selectors the Volume value
            </summary>
        </member>
        <member name="T:VigiothCapital.QuantTrader.LocalTimeKeeper">
            <summary>
            Represents the current local time. This object is created via the <see cref="T:VigiothCapital.QuantTrader.TimeKeeper"/> to
            manage conversions to local time.
            </summary>
        </member>
        <member name="E:VigiothCapital.QuantTrader.LocalTimeKeeper.TimeUpdated">
            <summary>
            Event fired each time <see cref="M:VigiothCapital.QuantTrader.LocalTimeKeeper.UpdateTime(System.DateTime)"/> is called
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.LocalTimeKeeper.TimeZone">
            <summary>
            Gets the time zone of this <see cref="T:VigiothCapital.QuantTrader.LocalTimeKeeper"/>
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.LocalTimeKeeper.LocalTime">
            <summary>
            Gets the current time in terms of the <see cref="P:VigiothCapital.QuantTrader.LocalTimeKeeper.TimeZone"/>
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.LocalTimeKeeper.#ctor(System.DateTime,NodaTime.DateTimeZone)">
            <summary>
            Initializes a new instance of the <see cref="T:VigiothCapital.QuantTrader.LocalTimeKeeper"/> class
            </summary>
            <param name="utcDateTime">The current time in UTC</param>
            <param name="timeZone">The time zone</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.LocalTimeKeeper.UpdateTime(System.DateTime)">
            <summary>
            Updates the current time of this time keeper
            </summary>
            <param name="utcDateTime">The current time in UTC</param>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Market">
            <summary>
            Markets Collection: Soon to be expanded to a collection of items specifying the market hour, timezones and country codes.
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.Market.USA">
            <summary>
            USA Market 
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.Market.Oanda">
            <summary>
            Oanda Market
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.Market.FXCM">
            <summary>
            FXCM Market Hours
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.Market.Dukascopy">
            <summary>
            Dukascopy Market
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.Market.Bitfinex">
            <summary>
            Bitfinex market
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Market.Add(System.String,System.Int32)">
            <summary>
            Adds the specified market to the map of available markets with the specified identifier.
            </summary>
            <param name="market">The market string to add</param>
            <param name="identifier">The identifier for the market, this value must be positive and less than 1000</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Market.Encode(System.String)">
            <summary>
            Gets the market code for the specified market. Returns <c>null</c> if the market is not found
            </summary>
            <param name="market">The market to check for (case sensitive)</param>
            <returns>The internal code used for the market. Corresponds to the value used when calling <see cref="M:VigiothCapital.QuantTrader.Market.Add(System.String,System.Int32)"/></returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Market.Decode(System.Int32)">
            <summary>
            Gets the market string for the specified market code.
            </summary>
            <param name="code">The market code to be decoded</param>
            <returns>The string representation of the market, or null if not found</returns>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Securities.RelativeStandardDeviationVolatilityModel">
            <summary>
            Provides an implementation of <see cref="T:VigiothCapital.QuantTrader.Securities.IVolatilityModel"/> that computes the
            relative standard deviation as the volatility of the security
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.RelativeStandardDeviationVolatilityModel.Volatility">
            <summary>
            Gets the volatility of the security as a percentage
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.RelativeStandardDeviationVolatilityModel.#ctor(System.TimeSpan,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:VigiothCapital.QuantTrader.Securities.RelativeStandardDeviationVolatilityModel"/> class
            </summary>
            <param name="periodSpan">The time span representing one 'period' length</param>
            <param name="periods">The nuber of 'period' lengths to wait until updating the value</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.RelativeStandardDeviationVolatilityModel.Update(VigiothCapital.QuantTrader.Securities.Security,VigiothCapital.QuantTrader.Data.BaseData)">
            <summary>
            Updates this model using the new price information in
            the specified security instance
            </summary>
            <param name="security">The security to calculate volatility for</param>
            <param name="data"></param>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Securities.SecurityDatabaseKey">
            <summary>
            Represents the key to a single entry in the <see cref="T:VigiothCapital.QuantTrader.Securities.MarketHoursDatabase"/> or the <see cref="T:VigiothCapital.QuantTrader.Securities.SymbolPropertiesDatabase"/>
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.Securities.SecurityDatabaseKey.Wildcard">
            <summary>
            Represents that the specified symbol or market field will match all
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.Securities.SecurityDatabaseKey.Market">
            <summary>
            The market. If null, ignore market filtering
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.Securities.SecurityDatabaseKey.Symbol">
            <summary>
            The symbol. If null, ignore symbol filtering
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.Securities.SecurityDatabaseKey.SecurityType">
            <summary>
            The security type
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityDatabaseKey.#ctor(System.String,System.String,VigiothCapital.QuantTrader.SecurityType)">
            <summary>
            Initializes a new instance of the <see cref="T:VigiothCapital.QuantTrader.Securities.SecurityDatabaseKey"/> class
            </summary>
            <param name="market">The market</param>
            <param name="symbol">The symbol. specify null to apply to all symbols in market/security type</param>
            <param name="securityType">The security type</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityDatabaseKey.Parse(System.String)">
            <summary>
            Parses the specified string as a <see cref="T:VigiothCapital.QuantTrader.Securities.SecurityDatabaseKey"/>
            </summary>
            <param name="key">The string representation of the key</param>
            <returns>A new <see cref="T:VigiothCapital.QuantTrader.Securities.SecurityDatabaseKey"/> instance</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityDatabaseKey.Equals(VigiothCapital.QuantTrader.Securities.SecurityDatabaseKey)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityDatabaseKey.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityDatabaseKey.GetHashCode">
            <summary>
            Serves as the default hash function. 
            </summary>
            <returns>
            A hash code for the current object.
            </returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityDatabaseKey.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Securities.SecurityExchangeHours">
            <summary>
            Represents the schedule of a security exchange. This includes daily regular and extended market hours
            as well as holidays
            </summary>
            <remarks>
            This type assumes that IsOpen will be called with increasingly future times, that is, the calls should never back
            track in time. This assumption is required to prevent time zone conversions on every call.
            </remarks>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityExchangeHours.TimeZone">
            <summary>
            Gets the time zone this exchange resides in
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityExchangeHours.Holidays">
            <summary>
            Gets the holidays for the exchange
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityExchangeHours.MarketHours">
            <summary>
            Gets the market hours for this exchange
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityExchangeHours.AlwaysOpen(NodaTime.DateTimeZone)">
            <summary>
            Gets a <see cref="T:VigiothCapital.QuantTrader.Securities.SecurityExchangeHours"/> instance that is always open
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityExchangeHours.#ctor(NodaTime.DateTimeZone,System.Collections.Generic.IEnumerable{System.DateTime},System.Collections.Generic.IReadOnlyDictionary{System.DayOfWeek,VigiothCapital.QuantTrader.Securities.LocalMarketHours})">
            <summary>
            Initializes a new instance of the <see cref="T:VigiothCapital.QuantTrader.Securities.SecurityExchangeHours"/> class
            </summary>
            <param name="timeZone">The time zone the dates and hours are represented in</param>
            <param name="holidayDates">The dates this exchange is closed for holiday</param>
            <param name="marketHoursForEachDayOfWeek">The exchange's schedule for each day of the week</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityExchangeHours.IsOpen(System.DateTime,System.Boolean)">
            <summary>
            Determines if the exchange is open at the specified local date time.
            </summary>
            <param name="localDateTime">The time to check represented as a local time</param>
            <param name="extendedMarket">True to use the extended market hours, false for just regular market hours</param>
            <returns>True if the exchange is considered open at the specified time, false otherwise</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityExchangeHours.IsOpen(System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Determines if the exchange is open at any point in time over the specified interval.
            </summary>
            <param name="startLocalDateTime">The start of the interval in local time</param>
            <param name="endLocalDateTime">The end of the interval in local time</param>
            <param name="extendedMarket">True to use the extended market hours, false for just regular market hours</param>
            <returns>True if the exchange is considered open at the specified time, false otherwise</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityExchangeHours.IsDateOpen(System.DateTime)">
            <summary>
            Determines if the exchange will be open on the date specified by the local date time
            </summary>
            <param name="localDateTime">The date time to check if the day is open</param>
            <returns>True if the exchange will be open on the specified date, false otherwise</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityExchangeHours.GetMarketHours(System.DateTime)">
            <summary>
            Helper to access the market hours field based on the day of week
            </summary>
            <param name="localDateTime">The local date time to retrieve market hours for</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityExchangeHours.GetNextMarketOpen(System.DateTime,System.Boolean)">
            <summary>
            Gets the local date time corresponding to the next market open following the specified time
            </summary>
            <param name="localDateTime">The time to begin searching for market open (non-inclusive)</param>
            <param name="extendedMarket">True to include extended market hours in the search</param>
            <returns>The next market opening date time following the specified local date time</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityExchangeHours.GetNextMarketClose(System.DateTime,System.Boolean)">
            <summary>
            Gets the local date time corresponding to the next market close following the specified time
            </summary>
            <param name="localDateTime">The time to begin searching for market close (non-inclusive)</param>
            <param name="extendedMarket">True to include extended market hours in the search</param>
            <returns>The next market closing date time following the specified local date time</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityExchangeHours.SetMarketHoursForDay(System.DayOfWeek,VigiothCapital.QuantTrader.Securities.LocalMarketHours@)">
            <summary>
            Helper to extract market hours from the <see cref="F:VigiothCapital.QuantTrader.Securities.SecurityExchangeHours._openHoursByDay"/> dictionary, filling
            in Closed instantes when not present
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityExchangeHours.GetMarketHours(System.DayOfWeek)">
            <summary>
            Helper to access the market hours field based on the day of week
            </summary>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Securities.SecurityPortfolioModel">
            <summary>
            Provides a default implementation of <see cref="T:VigiothCapital.QuantTrader.Securities.ISecurityPortfolioModel"/> that simply
            applies the fills to the algorithm's portfolio. This implementation is intended to 
            handle all security types.
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityPortfolioModel.ProcessFill(VigiothCapital.QuantTrader.Securities.SecurityPortfolioManager,VigiothCapital.QuantTrader.Securities.Security,VigiothCapital.QuantTrader.Orders.OrderEvent)">
            <summary>
            Performs application of an OrderEvent to the portfolio
            </summary>
            <param name="portfolio">The algorithm's portfolio</param>
            <param name="security">The fill's security</param>
            <param name="fill">The order event fill object to be applied</param>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Securities.SecurityMarginModel">
            <summary>
            Represents a simple, constant margining model by specifying the percentages of required margin.
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityMarginModel.#ctor(System.Decimal,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:VigiothCapital.QuantTrader.Securities.SecurityMarginModel"/>
            </summary>
            <param name="initialMarginRequirement">The percentage of an order's absolute cost
            that must be held in free cash in order to place the order</param>
            <param name="maintenanceMarginRequirement">The percentage of the holding's absolute
            cost that must be held in free cash in order to avoid a margin call</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityMarginModel.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:VigiothCapital.QuantTrader.Securities.SecurityMarginModel"/>
            </summary>
            <param name="leverage">The leverage</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityMarginModel.GetLeverage(VigiothCapital.QuantTrader.Securities.Security)">
            <summary>
            Gets the current leverage of the security
            </summary>
            <param name="security">The security to get leverage for</param>
            <returns>The current leverage in the security</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityMarginModel.SetLeverage(VigiothCapital.QuantTrader.Securities.Security,System.Decimal)">
            <summary>
            Sets the leverage for the applicable securities, i.e, equities
            </summary>
            <remarks>
            This is added to maintain backwards compatibility with the old margin/leverage system
            </remarks>
            <param name="security"></param>
            <param name="leverage">The new leverage</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityMarginModel.GetInitialMarginRequiredForOrder(VigiothCapital.QuantTrader.Securities.Security,VigiothCapital.QuantTrader.Orders.Order)">
            <summary>
            Gets the total margin required to execute the specified order in units of the account currency including fees
            </summary>
            <param name="security">The security to compute initial margin for</param>
            <param name="order">The order to be executed</param>
            <returns>The total margin in terms of the currency quoted in the order</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityMarginModel.GetMaintenanceMargin(VigiothCapital.QuantTrader.Securities.Security)">
            <summary>
            Gets the margin currently alloted to the specified holding
            </summary>
            <param name="security">The security to compute maintenance margin for</param>
            <returns>The maintenance margin required for the </returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityMarginModel.GetMarginRemaining(VigiothCapital.QuantTrader.Securities.SecurityPortfolioManager,VigiothCapital.QuantTrader.Securities.Security,VigiothCapital.QuantTrader.Orders.OrderDirection)">
            <summary>
            Gets the margin cash available for a trade
            </summary>
            <param name="portfolio">The algorithm's portfolio</param>
            <param name="security">The security to be traded</param>
            <param name="direction">The direction of the trade</param>
            <returns>The margin available for the trade</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityMarginModel.GenerateMarginCallOrder(VigiothCapital.QuantTrader.Securities.Security,System.Decimal,System.Decimal)">
            <summary>
            Generates a new order for the specified security taking into account the total margin
            used by the account. Returns null when no margin call is to be issued.
            </summary>
            <param name="security">The security to generate a margin call order for</param>
            <param name="netLiquidationValue">The net liquidation value for the entire account</param>
            <param name="totalMargin">The total margin used by the account in units of base currency</param>
            <returns>An order object representing a liquidation order to be executed to bring the account within margin requirements</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityMarginModel.GetInitialMarginRequirement(VigiothCapital.QuantTrader.Securities.Security)">
            <summary>
            The percentage of an order's absolute cost that must be held in free cash in order to place the order
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityMarginModel.GetMaintenanceMarginRequirement(VigiothCapital.QuantTrader.Securities.Security)">
            <summary>
            The percentage of the holding's absolute cost that must be held in free cash in order to avoid a margin call
            </summary>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Securities.StrikeExpiryOptionFilter">
            <summary>
            Provides an implementation of <see cref="T:VigiothCapital.QuantTrader.Securities.IDerivativeSecurityFilter"/> for use in selecting
            options contracts based on a range of strikes and expiries
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.StrikeExpiryOptionFilter.#ctor(System.Int32,System.Int32,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:VigiothCapital.QuantTrader.Securities.StrikeExpiryOptionFilter"/> class
            </summary>
            <param name="minStrike">The minimum strike relative to the underlying price, for example, -1 would filter out contracts further than 1 strike below market price</param>
            <param name="maxStrike">The maximum strike relative to the underlying price, for example, +1 would filter out contracts further than 1 strike above market price</param>
            <param name="minExpiry">The minium time until expiry, for example, 7 days would filter out contracts expiring sooner than 7 days</param>
            <param name="maxExpiry">The maximum time until expiry, for example, 30 days would filter out contracts expriring later than 30 days</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.StrikeExpiryOptionFilter.Filter(System.Collections.Generic.IEnumerable{VigiothCapital.QuantTrader.Symbol},VigiothCapital.QuantTrader.Data.BaseData)">
            <summary>
            Filters the input set of symbols using the underlying price data
            </summary>
            <param name="symbols">The derivative symbols to be filtered</param>
            <param name="underlying">The underlying price data</param>
            <returns>The filtered set of symbols</returns>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Securities.SymbolProperties">
            <summary>
            Represents common properties for a specific security, uniquely identified by market, symbol and security type
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SymbolProperties.Description">
            <summary>
            The description of the security
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SymbolProperties.QuoteCurrency">
            <summary>
            The quote currency of the security
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SymbolProperties.ContractMultiplier">
            <summary>
            The contract multiplier for the security
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SymbolProperties.PipSize">
            <summary>
            The pip size (tick size) for the security
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SymbolProperties.#ctor(System.String,System.String,System.Decimal,System.Decimal)">
            <summary>
            Creates an instance of the <see cref="T:VigiothCapital.QuantTrader.Securities.SymbolProperties"/> class
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SymbolProperties.GetDefault(System.String)">
            <summary>
            Gets a default instance of the <see cref="T:VigiothCapital.QuantTrader.Securities.SymbolProperties"/> class for the specified <paramref name="quoteCurrency"/>
            </summary>
            <param name="quoteCurrency">The quote currency of the symbol</param>
            <returns>A default instance of the<see cref="T:VigiothCapital.QuantTrader.Securities.SymbolProperties"/> class</returns>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Securities.SymbolPropertiesDatabase">
            <summary>
            Provides access to specific properties for various symbols
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SymbolPropertiesDatabase.GetSymbolProperties(System.String,System.String,VigiothCapital.QuantTrader.SecurityType,System.String)">
            <summary>
            Gets the symbol properties for the specified market/symbol/security-type
            </summary>
            <param name="market">The market the exchange resides in, i.e, 'usa', 'fxcm', ect...</param>
            <param name="symbol">The particular symbol being traded</param>
            <param name="securityType">The security type of the symbol</param>
            <param name="defaultQuoteCurrency">Specifies the quote currency to be used when returning a default instance of an entry is not found in the database</param>
            <returns>The symbol properties matching the specified market/symbol/security-type or null if not found</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SymbolPropertiesDatabase.FromDataFolder">
            <summary>
            Gets the instance of the <see cref="T:VigiothCapital.QuantTrader.Securities.SymbolPropertiesDatabase"/> class produced by reading in the symbol properties
            data found in /Data/symbol-properties/
            </summary>
            <returns>A <see cref="T:VigiothCapital.QuantTrader.Securities.SymbolPropertiesDatabase"/> class that represents the data in the symbol-properties folder</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SymbolPropertiesDatabase.FromCsvFile(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:VigiothCapital.QuantTrader.Securities.SymbolPropertiesDatabase"/> class by reading the specified csv file
            </summary>
            <param name="file">The csv file to be read</param>
            <returns>A new instance of the <see cref="T:VigiothCapital.QuantTrader.Securities.SymbolPropertiesDatabase"/> class representing the data in the specified file</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SymbolPropertiesDatabase.FromCsvLine(System.String,VigiothCapital.QuantTrader.Securities.SecurityDatabaseKey@)">
            <summary>
            Creates a new instance of <see cref="T:VigiothCapital.QuantTrader.Securities.SymbolProperties"/> from the specified csv line
            </summary>
            <param name="line">The csv line to be parsed</param>
            <param name="key">The key used to uniquely identify this security</param>
            <returns>A new <see cref="T:VigiothCapital.QuantTrader.Securities.SymbolProperties"/> for the specified csv line</returns>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Securities.UniverseManager">
            <summary>
            Manages the algorithm's collection of universes
            </summary>
        </member>
        <member name="E:VigiothCapital.QuantTrader.Securities.UniverseManager.CollectionChanged">
            <summary>
            Event fired when a universe is added or removed
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.UniverseManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VigiothCapital.QuantTrader.Securities.UniverseManager"/> class
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.UniverseManager.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.UniverseManager.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.UniverseManager.Add(System.Collections.Generic.KeyValuePair{VigiothCapital.QuantTrader.Symbol,VigiothCapital.QuantTrader.Data.UniverseSelection.Universe})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.UniverseManager.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. </exception>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.UniverseManager.Contains(System.Collections.Generic.KeyValuePair{VigiothCapital.QuantTrader.Symbol,VigiothCapital.QuantTrader.Data.UniverseSelection.Universe})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.UniverseManager.CopyTo(System.Collections.Generic.KeyValuePair{VigiothCapital.QuantTrader.Symbol,VigiothCapital.QuantTrader.Data.UniverseSelection.Universe}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param><param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param><exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception><exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.UniverseManager.Remove(System.Collections.Generic.KeyValuePair{VigiothCapital.QuantTrader.Symbol,VigiothCapital.QuantTrader.Data.UniverseSelection.Universe})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.UniverseManager.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.UniverseManager.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.UniverseManager.ContainsKey(VigiothCapital.QuantTrader.Symbol)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the key; otherwise, false.
            </returns>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.UniverseManager.Add(VigiothCapital.QuantTrader.Symbol,VigiothCapital.QuantTrader.Data.UniverseSelection.Universe)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param><param name="universe">The object to use as the value of the element to add.</param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception><exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.UniverseManager.Remove(VigiothCapital.QuantTrader.Symbol)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key"/> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
            <param name="key">The key of the element to remove.</param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.UniverseManager.TryGetValue(VigiothCapital.QuantTrader.Symbol,VigiothCapital.QuantTrader.Data.UniverseSelection.Universe@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <returns>
            true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key; otherwise, false.
            </returns>
            <param name="key">The key whose value to get.</param><param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value"/> parameter. This parameter is passed uninitialized.</param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.UniverseManager.Item(VigiothCapital.QuantTrader.Symbol)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            <returns>
            The element with the specified key.
            </returns>
            <param name="symbol">The key of the element to get or set.</param><exception cref="T:System.ArgumentNullException"><paramref name="symbol"/> is null.</exception><exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and <paramref name="symbol"/> is not found.</exception><exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.UniverseManager.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.UniverseManager.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.UniverseManager.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Event invocator for the <see cref="E:VigiothCapital.QuantTrader.Securities.UniverseManager.CollectionChanged"/> event
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Securities.UnsettledCashAmount">
            <summary>
            Represents a pending cash amount waiting for settlement time
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.UnsettledCashAmount.SettlementTimeUtc">
            <summary>
            The settlement time (in UTC)
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.UnsettledCashAmount.Currency">
            <summary>
            The currency symbol
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.UnsettledCashAmount.Amount">
            <summary>
            The amount of cash
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.UnsettledCashAmount.#ctor(System.DateTime,System.String,System.Decimal)">
            <summary>
            Creates a new instance of the <see cref="T:VigiothCapital.QuantTrader.Securities.UnsettledCashAmount"/> class
            </summary>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Securities.SecurityDataFilter">
            <summary>
            Base class implementation for packet by packet data filtering mechanism to dynamically detect bad ticks.
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityDataFilter.#ctor">
            <summary>
            Initialize data filter class
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityDataFilter.Filter(VigiothCapital.QuantTrader.Securities.Security,VigiothCapital.QuantTrader.Data.BaseData)">
            <summary>
            Filter the data packet passing through this method by returning true to accept, or false to fail/reject the data point.
            </summary>
            <param name="data">BasData data object we're filtering</param>
            <param name="vehicle">Security vehicle for filter</param>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Securities.SecurityTransactionModel">
            <summary>
            Default security transaction model for user defined securities.
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityTransactionModel.#ctor">
            <summary>
            Initializes a new default instance of the <see cref="T:VigiothCapital.QuantTrader.Securities.SecurityTransactionModel"/> class.
            This will use default slippage and fill models.
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityTransactionModel.#ctor(VigiothCapital.QuantTrader.Orders.Fills.IFillModel,VigiothCapital.QuantTrader.Orders.Fees.IFeeModel,VigiothCapital.QuantTrader.Orders.Slippage.ISlippageModel)">
            <summary>
            Initializes a new instance of the <see cref="T:VigiothCapital.QuantTrader.Securities.SecurityTransactionManager"/> class
            </summary>
            <param name="fillModel">The fill model to use</param>
            <param name="feeModel">The order fee model to use</param>
            <param name="slippageModel">The slippage model to use</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityTransactionModel.MarketFill(VigiothCapital.QuantTrader.Securities.Security,VigiothCapital.QuantTrader.Orders.MarketOrder)">
            <summary>
            Default market fill model for the base security class. Fills at the last traded price.
            </summary>
            <param name="asset">Security asset we're filling</param>
            <param name="order">Order packet to model</param>
            <returns>Order fill information detailing the average price and quantity filled.</returns>
            <seealso cref="M:VigiothCapital.QuantTrader.Securities.SecurityTransactionModel.StopMarketFill(VigiothCapital.QuantTrader.Securities.Security,VigiothCapital.QuantTrader.Orders.StopMarketOrder)"/>
            <seealso cref="M:VigiothCapital.QuantTrader.Securities.SecurityTransactionModel.LimitFill(VigiothCapital.QuantTrader.Securities.Security,VigiothCapital.QuantTrader.Orders.LimitOrder)"/>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityTransactionModel.StopMarketFill(VigiothCapital.QuantTrader.Securities.Security,VigiothCapital.QuantTrader.Orders.StopMarketOrder)">
            <summary>
            Default stop fill model implementation in base class security. (Stop Market Order Type)
            </summary>
            <param name="asset">Security asset we're filling</param>
            <param name="order">Order packet to model</param>
            <returns>Order fill information detailing the average price and quantity filled.</returns>
            <seealso cref="M:VigiothCapital.QuantTrader.Securities.SecurityTransactionModel.MarketFill(VigiothCapital.QuantTrader.Securities.Security,VigiothCapital.QuantTrader.Orders.MarketOrder)"/>
            <seealso cref="M:VigiothCapital.QuantTrader.Securities.SecurityTransactionModel.LimitFill(VigiothCapital.QuantTrader.Securities.Security,VigiothCapital.QuantTrader.Orders.LimitOrder)"/>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityTransactionModel.StopLimitFill(VigiothCapital.QuantTrader.Securities.Security,VigiothCapital.QuantTrader.Orders.StopLimitOrder)">
            <summary>
            Default stop limit fill model implementation in base class security. (Stop Limit Order Type)
            </summary>
            <param name="asset">Security asset we're filling</param>
            <param name="order">Order packet to model</param>
            <returns>Order fill information detailing the average price and quantity filled.</returns>
            <seealso cref="M:VigiothCapital.QuantTrader.Securities.SecurityTransactionModel.StopMarketFill(VigiothCapital.QuantTrader.Securities.Security,VigiothCapital.QuantTrader.Orders.StopMarketOrder)"/>
            <seealso cref="M:VigiothCapital.QuantTrader.Securities.SecurityTransactionModel.LimitFill(VigiothCapital.QuantTrader.Securities.Security,VigiothCapital.QuantTrader.Orders.LimitOrder)"/>
            <remarks>
                There is no good way to model limit orders with OHLC because we never know whether the market has 
                gapped past our fill price. We have to make the assumption of a fluid, high volume market.
            
                Stop limit orders we also can't be sure of the order of the H - L values for the limit fill. The assumption
                was made the limit fill will be done with closing price of the bar after the stop has been triggered..
            </remarks>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityTransactionModel.LimitFill(VigiothCapital.QuantTrader.Securities.Security,VigiothCapital.QuantTrader.Orders.LimitOrder)">
            <summary>
            Default limit order fill model in the base security class.
            </summary>
            <param name="asset">Security asset we're filling</param>
            <param name="order">Order packet to model</param>
            <returns>Order fill information detailing the average price and quantity filled.</returns>
            <seealso cref="M:VigiothCapital.QuantTrader.Securities.SecurityTransactionModel.StopMarketFill(VigiothCapital.QuantTrader.Securities.Security,VigiothCapital.QuantTrader.Orders.StopMarketOrder)"/>
            <seealso cref="M:VigiothCapital.QuantTrader.Securities.SecurityTransactionModel.MarketFill(VigiothCapital.QuantTrader.Securities.Security,VigiothCapital.QuantTrader.Orders.MarketOrder)"/>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityTransactionModel.MarketOnOpenFill(VigiothCapital.QuantTrader.Securities.Security,VigiothCapital.QuantTrader.Orders.MarketOnOpenOrder)">
            <summary>
            Market on Open Fill Model. Return an order event with the fill details
            </summary>
            <param name="asset">Asset we're trading with this order</param>
            <param name="order">Order to be filled</param>
            <returns>Order fill information detailing the average price and quantity filled.</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityTransactionModel.MarketOnCloseFill(VigiothCapital.QuantTrader.Securities.Security,VigiothCapital.QuantTrader.Orders.MarketOnCloseOrder)">
            <summary>
            Market on Close Fill Model. Return an order event with the fill details
            </summary>
            <param name="asset">Asset we're trading with this order</param>
            <param name="order">Order to be filled</param>
            <returns>Order fill information detailing the average price and quantity filled.</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityTransactionModel.GetSlippageApproximation(VigiothCapital.QuantTrader.Securities.Security,VigiothCapital.QuantTrader.Orders.Order)">
            <summary>
            Get the slippage approximation for this order
            </summary>
            <param name="security">Security asset we're filling</param>
            <param name="order">Order packet to model</param>
            <returns>decimal approximation for slippage</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityTransactionModel.GetOrderFee(VigiothCapital.QuantTrader.Securities.Security,VigiothCapital.QuantTrader.Orders.Order)">
            <summary>
            Default implementation returns 0 for fees.
            </summary>
            <param name="security">The security matching the order</param>
            <param name="order">The order to compute fees for</param>
            <returns>The cost of the order in units of the account currency</returns>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Securities.Security">
            <summary>
            A base vehicle properties class for providing a common interface to all assets in VigiothCapital.QuantTrader.
            </summary>
            <remarks>
            Security object is intended to hold properties of the specific security asset. These properties can include trade start-stop dates, 
            price, market hours, resolution of the security, the holdings information for this security and the specific fill model.
            </remarks>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.Security.Subscriptions">
            <summary>
            Gets all the subscriptions for this security
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.Security.Symbol">
            <summary>
            <see cref="P:VigiothCapital.QuantTrader.Securities.Security.Symbol"/> for the asset.
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.Security.QuoteCurrency">
            <summary>
            Gets the Cash object used for converting the quote currency to the account currency
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.Security.SymbolProperties">
            <summary>
            Gets the symbol properties for this security
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.Security.Type">
            <summary>
            Type of the security.
            </summary>
            <remarks>
            VigiothCapital.QuantTrader currently only supports Equities and Forex
            </remarks>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.Security.Resolution">
            <summary>
            Resolution of data requested for this security.
            </summary>
            <remarks>Tick, second or minute resolution for VigiothCapital.QuantTrader assets.</remarks>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.Security.IsFillDataForward">
            <summary>
            Indicates the data will use previous bars when there was no trading in this time period. This was a configurable datastream setting set in initialization.
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.Security.IsExtendedMarketHours">
            <summary>
            Indicates the security will continue feeding data after the primary market hours have closed. This was a configurable setting set in initialization.
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.Security.DataNormalizationMode">
            <summary>
            Gets the data normalization mode used for this security
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.Security.SubscriptionDataConfig">
            <summary>
            Gets the subscription configuration for this security
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.Security.HasData">
            <summary>
            There has been at least one datapoint since our algorithm started running for us to determine price.
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.Security.IsTradable">
            <summary>
            Gets or sets whether or not this security should be considered tradable
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.Security.Cache">
            <summary>
            Data cache for the security to store previous price information.
            </summary>
            <seealso cref="T:VigiothCapital.QuantTrader.Securities.Equity.EquityCache"/>
            <seealso cref="T:VigiothCapital.QuantTrader.Securities.Forex.ForexCache"/>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.Security.Holdings">
            <summary>
            Holdings class contains the portfolio, cash and processes order fills.
            </summary>
            <seealso cref="T:VigiothCapital.QuantTrader.Securities.Equity.EquityHolding"/>
            <seealso cref="T:VigiothCapital.QuantTrader.Securities.Forex.ForexHolding"/>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.Security.Exchange">
            <summary>
            Exchange class contains the market opening hours, along with pre-post market hours.
            </summary>
            <seealso cref="T:VigiothCapital.QuantTrader.Securities.Equity.EquityExchange"/>
            <seealso cref="T:VigiothCapital.QuantTrader.Securities.Forex.ForexExchange"/>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.Security.Model">
            <summary>
            Transaction model class implements the fill models for the security. If the user does not define a model the default
            model is used for this asset class.
            </summary>
            <remarks>This is ignored in live trading and the real fill prices are used instead</remarks>
            <seealso cref="T:VigiothCapital.QuantTrader.Securities.Equity.EquityTransactionModel"/>
            <seealso cref="T:VigiothCapital.QuantTrader.Securities.Forex.ForexTransactionModel"/>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.Security.TransactionModel">
            <summary>
            Transaction model class implements the fill models for the security. If the user does not define a model the default
            model is used for this asset class.
            </summary>
            <remarks>This is ignored in live trading and the real fill prices are used instead</remarks>
            <seealso cref="T:VigiothCapital.QuantTrader.Securities.Equity.EquityTransactionModel"/>
            <seealso cref="T:VigiothCapital.QuantTrader.Securities.Forex.ForexTransactionModel"/>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.Security.FeeModel">
            <summary>
            Fee model used to compute order fees for this security
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.Security.FillModel">
            <summary>
            Fill model used to produce fill events for this security
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.Security.SlippageModel">
            <summary>
            Slippage model use to compute slippage of market orders
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.Security.PortfolioModel">
            <summary>
            Gets the portfolio model used by this security
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.Security.MarginModel">
            <summary>
            Gets the margin model used for this security
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.Security.SettlementModel">
            <summary>
            Gets the settlement model used for this security
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.Security.VolatilityModel">
            <summary>
            Gets the volatility model used for this security
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.Security.DataFilter">
            <summary>
            Customizable data filter to filter outlier ticks before they are passed into user event handlers. 
            By default all ticks are passed into the user algorithms.
            </summary>
            <remarks>TradeBars (seconds and minute bars) are prefiltered to ensure the ticks which build the bars are realistically tradeable</remarks>
            <seealso cref="T:VigiothCapital.QuantTrader.Securities.Equity.EquityDataFilter"/>
            <seealso cref="T:VigiothCapital.QuantTrader.Securities.Forex.ForexDataFilter"/>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.Security.#ctor(VigiothCapital.QuantTrader.Securities.SecurityExchangeHours,VigiothCapital.QuantTrader.Data.SubscriptionDataConfig,VigiothCapital.QuantTrader.Securities.Cash,VigiothCapital.QuantTrader.Securities.SymbolProperties)">
            <summary>
            Construct a new security vehicle based on the user options.
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.Security.#ctor(VigiothCapital.QuantTrader.Symbol,VigiothCapital.QuantTrader.Securities.SecurityExchangeHours,VigiothCapital.QuantTrader.Securities.Cash,VigiothCapital.QuantTrader.Securities.SymbolProperties)">
            <summary>
            Construct a new security vehicle based on the user options.
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.Security.#ctor(VigiothCapital.QuantTrader.Symbol,VigiothCapital.QuantTrader.Securities.Cash,VigiothCapital.QuantTrader.Securities.SymbolProperties,VigiothCapital.QuantTrader.Securities.SecurityExchange,VigiothCapital.QuantTrader.Securities.SecurityCache,VigiothCapital.QuantTrader.Securities.ISecurityPortfolioModel,VigiothCapital.QuantTrader.Orders.Fills.IFillModel,VigiothCapital.QuantTrader.Orders.Fees.IFeeModel,VigiothCapital.QuantTrader.Orders.Slippage.ISlippageModel,VigiothCapital.QuantTrader.Securities.ISettlementModel,VigiothCapital.QuantTrader.Securities.IVolatilityModel,VigiothCapital.QuantTrader.Securities.ISecurityMarginModel,VigiothCapital.QuantTrader.Securities.Interfaces.ISecurityDataFilter)">
            <summary>
            Construct a new security vehicle based on the user options.
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.Security.#ctor(VigiothCapital.QuantTrader.Data.SubscriptionDataConfig,VigiothCapital.QuantTrader.Securities.Cash,VigiothCapital.QuantTrader.Securities.SymbolProperties,VigiothCapital.QuantTrader.Securities.SecurityExchange,VigiothCapital.QuantTrader.Securities.SecurityCache,VigiothCapital.QuantTrader.Securities.ISecurityPortfolioModel,VigiothCapital.QuantTrader.Orders.Fills.IFillModel,VigiothCapital.QuantTrader.Orders.Fees.IFeeModel,VigiothCapital.QuantTrader.Orders.Slippage.ISlippageModel,VigiothCapital.QuantTrader.Securities.ISettlementModel,VigiothCapital.QuantTrader.Securities.IVolatilityModel,VigiothCapital.QuantTrader.Securities.ISecurityMarginModel,VigiothCapital.QuantTrader.Securities.Interfaces.ISecurityDataFilter)">
            <summary>
            Temporary convenience constructor
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.Security.HoldStock">
            <summary>
            Read only property that checks if we currently own stock in the company.
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.Security.Invested">
            <summary>
            Alias for HoldStock - Do we have any of this security
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.Security.LocalTime">
            <summary>
            Local time for this market 
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.Security.Price">
            <summary>
            Get the current value of the security.
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.Security.Leverage">
            <summary>
            Leverage for this Security.
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.Security.High">
            <summary>
            If this uses tradebar data, return the most recent high.
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.Security.Low">
            <summary>
            If this uses tradebar data, return the most recent low.
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.Security.Close">
            <summary>
            If this uses tradebar data, return the most recent close.
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.Security.Open">
            <summary>
            If this uses tradebar data, return the most recent open.
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.Security.Volume">
            <summary>
            Access to the volume of the equity today
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.Security.BidPrice">
            <summary>
            Gets the most recent bid price if available
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.Security.BidSize">
            <summary>
            Gets the most recent bid size if available
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.Security.AskPrice">
            <summary>
            Gets the most recent ask price if available
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.Security.AskSize">
            <summary>
            Gets the most recent ask size if available
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.Security.GetLastData">
            <summary>
            Get the last price update set to the security.
            </summary>
            <returns>BaseData object for this security</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.Security.SetLocalTimeKeeper(VigiothCapital.QuantTrader.LocalTimeKeeper)">
            <summary>
            Sets the <see cref="T:VigiothCapital.QuantTrader.LocalTimeKeeper"/> to be used for this <see cref="T:VigiothCapital.QuantTrader.Securities.Security"/>.
            This is the source of this instance's time.
            </summary>
            <param name="localTimeKeeper">The source of this <see cref="T:VigiothCapital.QuantTrader.Securities.Security"/>'s time.</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.Security.SetMarketPrice(VigiothCapital.QuantTrader.Data.BaseData)">
            <summary>
            Update any security properties based on the lastest market data and time
            </summary>
            <param name="data">New data packet from LEAN</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.Security.SetLeverage(System.Decimal)">
            <summary>
            Set the leverage parameter for this security
            </summary>
            <param name="leverage">Leverage for this asset</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.Security.SetDataNormalizationMode(VigiothCapital.QuantTrader.DataNormalizationMode)">
            <summary>
            Sets the data normalization mode to be used by this security
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.Security.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.Security.AddData(VigiothCapital.QuantTrader.Data.SubscriptionDataConfig)">
            <summary>
            Adds the specified data subscription to this security.
            </summary>
            <param name="subscription">The subscription configuration to add. The Symbol and ExchangeTimeZone properties must match the existing Security object</param>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Securities.SecurityCache">
            <summary>
            Base class caching caching spot for security data and any other temporary properties.
            </summary>
            <remarks>
            This class is virtually unused and will soon be made obsolete. 
            This comment made in a remark to prevent obsolete errors in all users algorithms
            </remarks>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityCache.Price">
            <summary>
            Gets the most recent price submitted to this cache
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityCache.Open">
            <summary>
            Gets the most recent open submitted to this cache
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityCache.High">
            <summary>
            Gets the most recent high submitted to this cache
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityCache.Low">
            <summary>
            Gets the most recent low submitted to this cache
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityCache.Close">
            <summary>
            Gets the most recent close submitted to this cache
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityCache.BidPrice">
            <summary>
            Gets the most recent bid submitted to this cache
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityCache.AskPrice">
            <summary>
            Gets the most recent ask submitted to this cache
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityCache.BidSize">
            <summary>
            Gets the most recent bid size submitted to this cache
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityCache.AskSize">
            <summary>
            Gets the most recent ask size submitted to this cache
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityCache.Volume">
            <summary>
            Gets the most recent volume submitted to this cache
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityCache.AddData(VigiothCapital.QuantTrader.Data.BaseData)">
            <summary>
            Add a new market data point to the local security cache for the current market price.
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityCache.GetData">
            <summary>
            Get last data packet recieved for this security
            </summary>
            <returns>BaseData type of the security</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityCache.GetData``1">
            <summary>
            Get last data packet recieved for this security of the specified ty[e
            </summary>
            <typeparam name="T">The data type</typeparam>
            <returns>The last data packet, null if none received of type</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityCache.Reset">
            <summary>
            Reset cache storage and free memory
            </summary>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Securities.SecurityExchange">
            <summary>
            Base exchange class providing information and helper tools for reading the current exchange situation
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityExchange.Hours">
            <summary>
            Gets the <see cref="T:VigiothCapital.QuantTrader.Securities.SecurityExchangeHours"/> for this exchange
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityExchange.TimeZone">
            <summary>
            Gets the time zone for this exchange
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityExchange.TradingDaysPerYear">
            <summary>
            Number of trading days per year for this security. By default the market is open 365 days per year.
            </summary>
            <remarks>Used for performance statistics to calculate sharpe ratio accurately</remarks>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityExchange.LocalTime">
            <summary>
            Time from the most recent data
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityExchange.ExchangeOpen">
            <summary>
            Boolean property for quickly testing if the exchange is open.
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityExchange.#ctor(VigiothCapital.QuantTrader.Securities.SecurityExchangeHours)">
            <summary>
            Initializes a new instance of the <see cref="T:VigiothCapital.QuantTrader.Securities.SecurityExchange"/> class using the specified
            exchange hours to determine open/close times
            </summary>
            <param name="exchangeHours">Contains the weekly exchange schedule plus holidays</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityExchange.SetLocalDateTimeFrontier(System.DateTime)">
            <summary>
            Set the current datetime in terms of the exchange's local time zone
            </summary>
            <param name="newLocalTime">Most recent data tick</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityExchange.DateIsOpen(System.DateTime)">
            <summary>
            Check if the *date* is open.
            </summary>
            <remarks>This is useful for first checking the date list, and then the market hours to save CPU cycles</remarks>
            <param name="dateToCheck">Date to check</param>
            <returns>Return true if the exchange is open for this date</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityExchange.DateTimeIsOpen(System.DateTime)">
            <summary>
            Check if this DateTime is open.
            </summary>
            <param name="dateTime">DateTime to check</param>
            <returns>Boolean true if the market is open</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityExchange.IsOpenDuringBar(System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Determines if the exchange was open at any time between start and stop
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityExchange.SetMarketHours(System.Collections.Generic.IEnumerable{VigiothCapital.QuantTrader.Securities.MarketHoursSegment},System.DayOfWeek[])">
            <summary>
            Sets the regular market hours for the specified days If no days are specified then
            all days will be updated.
            </summary>
            <param name="marketHoursSegments">Specifies each segment of the market hours, such as premarket/market/postmark</param>
            <param name="days">The days of the week to set these times for</param>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Securities.SecurityHolding">
            <summary>
            SecurityHolding is a base class for purchasing and holding a market item which manages the asset portfolio
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityHolding.#ctor(VigiothCapital.QuantTrader.Securities.Security)">
            <summary>
            Create a new holding class instance setting the initial properties to $0.
            </summary>
            <param name="security">The security being held</param>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityHolding.AveragePrice">
            <summary>
            Average price of the security holdings.
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityHolding.Quantity">
            <summary>
            Quantity of the security held.
            </summary>
            <remarks>Positive indicates long holdings, negative quantity indicates a short holding</remarks>
            <seealso cref="P:VigiothCapital.QuantTrader.Securities.SecurityHolding.AbsoluteQuantity"/>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityHolding.Symbol">
            <summary>
            Symbol identifier of the underlying security.
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityHolding.Type">
            <summary>
            The security type of the symbol
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityHolding.Leverage">
            <summary>
            Leverage of the underlying security.
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityHolding.HoldingsCost">
            <summary>
            Acquisition cost of the security total holdings.
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityHolding.UnleveredHoldingsCost">
            <summary>
            Unlevered Acquisition cost of the security total holdings.
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityHolding.Price">
            <summary>
            Current market price of the security.
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityHolding.AbsoluteHoldingsCost">
            <summary>
            Absolute holdings cost for current holdings in units of the account's currency
            </summary>
            <seealso cref="P:VigiothCapital.QuantTrader.Securities.SecurityHolding.HoldingsCost"/>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityHolding.UnleveredAbsoluteHoldingsCost">
            <summary>
            Unlevered absolute acquisition cost of the security total holdings.
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityHolding.HoldingsValue">
            <summary>
            Market value of our holdings.
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityHolding.AbsoluteHoldingsValue">
            <summary>
            Absolute of the market value of our holdings.
            </summary>
            <seealso cref="P:VigiothCapital.QuantTrader.Securities.SecurityHolding.HoldingsValue"/>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityHolding.HoldStock">
            <summary>
            Boolean flat indicating if we hold any of the security
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityHolding.Invested">
            <summary>
            Boolean flat indicating if we hold any of the security
            </summary>
            <remarks>Alias of HoldStock</remarks>
            <seealso cref="P:VigiothCapital.QuantTrader.Securities.SecurityHolding.HoldStock"/>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityHolding.TotalSaleVolume">
            <summary>
            The total transaction volume for this security since the algorithm started.
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityHolding.TotalFees">
            <summary>
            Total fees for this company since the algorithm started.
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityHolding.IsLong">
            <summary>
            Boolean flag indicating we have a net positive holding of the security.
            </summary>
            <seealso cref="P:VigiothCapital.QuantTrader.Securities.SecurityHolding.IsShort"/>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityHolding.IsShort">
            <summary>
            BBoolean flag indicating we have a net negative holding of the security.
            </summary>
            <seealso cref="P:VigiothCapital.QuantTrader.Securities.SecurityHolding.IsLong"/>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityHolding.AbsoluteQuantity">
            <summary>
            Absolute quantity of holdings of this security
            </summary>
            <seealso cref="P:VigiothCapital.QuantTrader.Securities.SecurityHolding.Quantity"/>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityHolding.LastTradeProfit">
            <summary>
            Record of the closing profit from the last trade conducted.
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityHolding.Profit">
            <summary>
            Calculate the total profit for this security.
            </summary>
            <seealso cref="P:VigiothCapital.QuantTrader.Securities.SecurityHolding.NetProfit"/>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityHolding.NetProfit">
            <summary>
            Return the net for this company measured by the profit less fees.
            </summary>
            <seealso cref="P:VigiothCapital.QuantTrader.Securities.SecurityHolding.Profit"/>
            <seealso cref="P:VigiothCapital.QuantTrader.Securities.SecurityHolding.TotalFees"/>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityHolding.UnrealizedProfitPercent">
            <summary>
            Gets the unrealized profit as a percenage of holdings cost
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityHolding.UnrealizedProfit">
            <summary>
            Unrealized profit of this security when absolute quantity held is more than zero.
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityHolding.AddNewFee(System.Decimal)">
            <summary>
            Adds a fee to the running total of total fees.
            </summary>
            <param name="newFee"></param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityHolding.AddNewProfit(System.Decimal)">
            <summary>
            Adds a profit record to the running total of profit.
            </summary>
            <param name="profitLoss">The cash change in portfolio from closing a position</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityHolding.AddNewSale(System.Decimal)">
            <summary>
            Adds a new sale value to the running total trading volume in terms of the account currency
            </summary>
            <param name="saleValue"></param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityHolding.SetLastTradeProfit(System.Decimal)">
            <summary>
            Set the last trade profit for this security from a Portfolio.ProcessFill call.
            </summary>
            <param name="lastTradeProfit">Value of the last trade profit</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityHolding.SetHoldings(System.Decimal,System.Int32)">
            <summary>
            Set the quantity of holdings and their average price after processing a portfolio fill.
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityHolding.UpdateMarketPrice(System.Decimal)">
            <summary>
            Update local copy of closing price value.
            </summary>
            <param name="closingPrice">Price of the underlying asset to be used for calculating market price / portfolio value</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityHolding.TotalCloseProfit">
            <summary>
            Profit if we closed the holdings right now including the approximate fees.
            </summary>
            <remarks>Does not use the transaction model for market fills but should.</remarks>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Securities.SecurityManager">
            <summary>
            Enumerable security management class for grouping security objects into an array and providing any common properties.
            </summary>
            <remarks>Implements IDictionary for the index searching of securities by symbol</remarks>
        </member>
        <member name="E:VigiothCapital.QuantTrader.Securities.SecurityManager.CollectionChanged">
            <summary>
            Event fired when a security is added or removed from this collection
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityManager.UtcTime">
            <summary>
            Gets the most recent time this manager was updated
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityManager.#ctor(VigiothCapital.QuantTrader.TimeKeeper)">
            <summary>
            Initialise the algorithm security manager with two empty dictionaries
            </summary>
            <param name="timeKeeper"></param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityManager.Add(VigiothCapital.QuantTrader.Symbol,VigiothCapital.QuantTrader.Securities.Security)">
            <summary>
            Add a new security with this symbol to the collection.
            </summary>
            <remarks>IDictionary implementation</remarks>
            <param name="symbol">symbol for security we're trading</param>
            <param name="security">security object</param>
            <seealso cref="M:VigiothCapital.QuantTrader.Securities.SecurityManager.Add(VigiothCapital.QuantTrader.Securities.Security)"/>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityManager.Add(VigiothCapital.QuantTrader.Securities.Security)">
            <summary>
            Add a new security with this symbol to the collection.
            </summary>
            <param name="security">security object</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityManager.Add(System.Collections.Generic.KeyValuePair{VigiothCapital.QuantTrader.Symbol,VigiothCapital.QuantTrader.Securities.Security})">
            <summary>
            Add a symbol-security by its key value pair.
            </summary>
            <remarks>IDictionary implementation</remarks>
            <param name="pair"></param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityManager.Clear">
            <summary>
            Clear the securities array to delete all the portfolio and asset information.
            </summary>
            <remarks>IDictionary implementation</remarks>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityManager.Contains(System.Collections.Generic.KeyValuePair{VigiothCapital.QuantTrader.Symbol,VigiothCapital.QuantTrader.Securities.Security})">
            <summary>
            Check if this collection contains this key value pair.
            </summary>
            <param name="pair">Search key-value pair</param>
            <remarks>IDictionary implementation</remarks>
            <returns>Bool true if contains this key-value pair</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityManager.ContainsKey(VigiothCapital.QuantTrader.Symbol)">
            <summary>
            Check if this collection contains this symbol.
            </summary>
            <param name="symbol">Symbol we're checking for.</param>
            <remarks>IDictionary implementation</remarks>
            <returns>Bool true if contains this symbol pair</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityManager.CopyTo(System.Collections.Generic.KeyValuePair{VigiothCapital.QuantTrader.Symbol,VigiothCapital.QuantTrader.Securities.Security}[],System.Int32)">
            <summary>
            Copy from the internal array to an external array.
            </summary>
            <param name="array">Array we're outputting to</param>
            <param name="number">Starting index of array</param>
            <remarks>IDictionary implementation</remarks>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityManager.Count">
            <summary>
            Count of the number of securities in the collection.
            </summary>
            <remarks>IDictionary implementation</remarks>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityManager.IsReadOnly">
            <summary>
            Flag indicating if the internal arrray is read only.
            </summary>
            <remarks>IDictionary implementation</remarks>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityManager.Remove(System.Collections.Generic.KeyValuePair{VigiothCapital.QuantTrader.Symbol,VigiothCapital.QuantTrader.Securities.Security})">
            <summary>
            Remove a key value of of symbol-securities from the collections.
            </summary>
            <remarks>IDictionary implementation</remarks>
            <param name="pair">Key Value pair of symbol-security to remove</param>
            <returns>Boolean true on success</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityManager.Remove(VigiothCapital.QuantTrader.Symbol)">
            <summary>
            Remove this symbol security: Dictionary interface implementation.
            </summary>
            <param name="symbol">Symbol we're searching for</param>
            <returns>true success</returns>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityManager.Keys">
            <summary>
            List of the symbol-keys in the collection of securities.
            </summary>
            <remarks>IDictionary implementation</remarks>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityManager.TryGetValue(VigiothCapital.QuantTrader.Symbol,VigiothCapital.QuantTrader.Securities.Security@)">
            <summary>
            Try and get this security object with matching symbol and return true on success.
            </summary>
            <param name="symbol">String search symbol</param>
            <param name="security">Output Security object</param>
            <remarks>IDictionary implementation</remarks>
            <returns>True on successfully locating the security object</returns>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityManager.Values">
            <summary>
            Get a list of the security objects for this collection.
            </summary>
            <remarks>IDictionary implementation</remarks>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityManager.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{VigiothCapital#QuantTrader#Symbol,VigiothCapital#QuantTrader#Securities#Security}}#GetEnumerator">
            <summary>
            Get the enumerator for this security collection.
            </summary>
            <remarks>IDictionary implementation</remarks>
            <returns>Enumerable key value pair</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityManager.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get the enumerator for this securities collection.
            </summary>
            <remarks>IDictionary implementation</remarks>
            <returns>Enumerator.</returns>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityManager.Item(VigiothCapital.QuantTrader.Symbol)">
            <summary>
            Indexer method for the security manager to access the securities objects by their symbol.
            </summary>
            <remarks>IDictionary implementation</remarks>
            <param name="symbol">Symbol object indexer</param>
            <returns>Security</returns>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityManager.Item(System.String)">
            <summary>
            Indexer method for the security manager to access the securities objects by their symbol.
            </summary>
            <remarks>IDictionary implementation</remarks>
            <param name="ticker">string ticker symbol indexer</param>
            <returns>Security</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityManager.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Event invocator for the <see cref="E:VigiothCapital.QuantTrader.Securities.SecurityManager.CollectionChanged"/> event
            </summary>
            <param name="changedEventArgs">Event arguments for the <see cref="E:VigiothCapital.QuantTrader.Securities.SecurityManager.CollectionChanged"/> event</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityManager.CreateSecurity(System.Type,VigiothCapital.QuantTrader.Securities.SecurityPortfolioManager,VigiothCapital.QuantTrader.Data.SubscriptionManager,VigiothCapital.QuantTrader.Securities.SecurityExchangeHours,NodaTime.DateTimeZone,VigiothCapital.QuantTrader.Securities.SymbolProperties,VigiothCapital.QuantTrader.Securities.ISecurityInitializer,VigiothCapital.QuantTrader.Symbol,VigiothCapital.QuantTrader.Resolution,System.Boolean,System.Decimal,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a security and matching configuration. This applies the default leverage if
            leverage is less than or equal to zero.
            This method also add the new symbol mapping to the <see cref="T:VigiothCapital.QuantTrader.SymbolCache"/>
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityManager.CreateSecurity(VigiothCapital.QuantTrader.Securities.SecurityPortfolioManager,VigiothCapital.QuantTrader.Data.SubscriptionManager,VigiothCapital.QuantTrader.Securities.MarketHoursDatabase,VigiothCapital.QuantTrader.Securities.SymbolPropertiesDatabase,VigiothCapital.QuantTrader.Securities.ISecurityInitializer,VigiothCapital.QuantTrader.Symbol,VigiothCapital.QuantTrader.Resolution,System.Boolean,System.Decimal,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a security and matching configuration. This applies the default leverage if
            leverage is less than or equal to zero.
            This method also add the new symbol mapping to the <see cref="T:VigiothCapital.QuantTrader.SymbolCache"/>
            </summary>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Securities.SecurityPortfolioManager">
            <summary>
            Portfolio manager class groups popular properties and makes them accessible through one interface.
            It also provide indexing by the vehicle symbol to get the Security.Holding objects.
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.Securities.SecurityPortfolioManager.Securities">
            <summary>
            Local access to the securities collection for the portfolio summation.
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.Securities.SecurityPortfolioManager.Transactions">
            <summary>
            Local access to the transactions collection for the portfolio summation and updates.
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityPortfolioManager.CashBook">
            <summary>
            Gets the cash book that keeps track of all currency holdings (only settled cash)
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityPortfolioManager.UnsettledCashBook">
            <summary>
            Gets the cash book that keeps track of all currency holdings (only unsettled cash)
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.Securities.SecurityPortfolioManager._unsettledCashAmounts">
            <summary>
            The list of pending funds waiting for settlement time
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityPortfolioManager.#ctor(VigiothCapital.QuantTrader.Securities.SecurityManager,VigiothCapital.QuantTrader.Securities.SecurityTransactionManager)">
            <summary>
            Initialise security portfolio manager.
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityPortfolioManager.Add(VigiothCapital.QuantTrader.Symbol,VigiothCapital.QuantTrader.Securities.SecurityHolding)">
            <summary>
            Add a new securities string-security to the portfolio.
            </summary>
            <param name="symbol">Symbol of dictionary</param>
            <param name="holding">SecurityHoldings object</param>
            <exception cref="T:System.NotImplementedException">Portfolio object is an adaptor for Security Manager. This method is not applicable for PortfolioManager class.</exception>
            <remarks>This method is not implemented and using it will throw an exception</remarks>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityPortfolioManager.Add(System.Collections.Generic.KeyValuePair{VigiothCapital.QuantTrader.Symbol,VigiothCapital.QuantTrader.Securities.SecurityHolding})">
            <summary>
            Add a new securities key value pair to the portfolio.
            </summary>
            <param name="pair">Key value pair of dictionary</param>
            <exception cref="T:System.NotImplementedException">Portfolio object is an adaptor for Security Manager. This method is not applicable for PortfolioManager class.</exception>
            <remarks>This method is not implemented and using it will throw an exception</remarks>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityPortfolioManager.Clear">
            <summary>
            Clear the portfolio of securities objects.
            </summary>
            <exception cref="T:System.NotImplementedException">Portfolio object is an adaptor for Security Manager. This method is not applicable for PortfolioManager class.</exception>
            <remarks>This method is not implemented and using it will throw an exception</remarks>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityPortfolioManager.Remove(System.Collections.Generic.KeyValuePair{VigiothCapital.QuantTrader.Symbol,VigiothCapital.QuantTrader.Securities.SecurityHolding})">
            <summary>
            Remove this keyvalue pair from the portfolio.
            </summary>
            <exception cref="T:System.NotImplementedException">Portfolio object is an adaptor for Security Manager. This method is not applicable for PortfolioManager class.</exception>
            <param name="pair">Key value pair of dictionary</param>
            <remarks>This method is not implemented and using it will throw an exception</remarks>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityPortfolioManager.Remove(VigiothCapital.QuantTrader.Symbol)">
            <summary>
            Remove this symbol from the portfolio.
            </summary>
            <exception cref="T:System.NotImplementedException">Portfolio object is an adaptor for Security Manager. This method is not applicable for PortfolioManager class.</exception>
            <param name="symbol">Symbol of dictionary</param>
            <remarks>This method is not implemented and using it will throw an exception</remarks>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityPortfolioManager.ContainsKey(VigiothCapital.QuantTrader.Symbol)">
            <summary>
            Check if the portfolio contains this symbol string.
            </summary>
            <param name="symbol">String search symbol for the security</param>
            <returns>Boolean true if portfolio contains this symbol</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityPortfolioManager.Contains(System.Collections.Generic.KeyValuePair{VigiothCapital.QuantTrader.Symbol,VigiothCapital.QuantTrader.Securities.SecurityHolding})">
            <summary>
            Check if the key-value pair is in the portfolio.
            </summary>
            <remarks>IDictionary implementation calling the underlying Securities collection</remarks>
            <param name="pair">Pair we're searching for</param>
            <returns>True if we have this object</returns>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityPortfolioManager.Count">
            <summary>
            Count the securities objects in the portfolio.
            </summary>
            <remarks>IDictionary implementation calling the underlying Securities collection</remarks>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityPortfolioManager.IsReadOnly">
            <summary>
            Check if the underlying securities array is read only.
            </summary>
            <remarks>IDictionary implementation calling the underlying Securities collection</remarks>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityPortfolioManager.CopyTo(System.Collections.Generic.KeyValuePair{VigiothCapital.QuantTrader.Symbol,VigiothCapital.QuantTrader.Securities.SecurityHolding}[],System.Int32)">
            <summary>
            Copy contents of the portfolio collection to a new destination.
            </summary>
            <remarks>IDictionary implementation calling the underlying Securities collection</remarks>
            <param name="array">Destination array</param>
            <param name="index">Position in array to start copying</param>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityPortfolioManager.Keys">
            <summary>
            Symbol keys collection of the underlying assets in the portfolio.
            </summary>
            <remarks>IDictionary implementation calling the underlying securities key symbols</remarks>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityPortfolioManager.Values">
            <summary>
            Collection of securities objects in the portfolio.
            </summary>
            <remarks>IDictionary implementation calling the underlying securities values collection</remarks>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityPortfolioManager.TryGetValue(VigiothCapital.QuantTrader.Symbol,VigiothCapital.QuantTrader.Securities.SecurityHolding@)">
            <summary>
            Attempt to get the value of the securities holding class if this symbol exists.
            </summary>
            <param name="symbol">String search symbol</param>
            <param name="holding">Holdings object of this security</param>
            <remarks>IDictionary implementation</remarks>
            <returns>Boolean true if successful locating and setting the holdings object</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityPortfolioManager.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{VigiothCapital#QuantTrader#Symbol,VigiothCapital#QuantTrader#Securities#SecurityHolding}}#GetEnumerator">
            <summary>
            Get the enumerator for the underlying securities collection.
            </summary>
            <remarks>IDictionary implementation</remarks>
            <returns>Enumerable key value pair</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityPortfolioManager.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get the enumerator for the underlying securities collection.
            </summary>
            <remarks>IDictionary implementation</remarks>
            <returns>Enumerator</returns>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityPortfolioManager.Cash">
            <summary>
            Sum of all currencies in account in US dollars (only settled cash)
            </summary>
            <remarks>
            This should not be mistaken for margin available because Forex uses margin
            even though the total cash value is not impact
            </remarks>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityPortfolioManager.UnsettledCash">
            <summary>
            Sum of all currencies in account in US dollars (only unsettled cash)
            </summary>
            <remarks>
            This should not be mistaken for margin available because Forex uses margin
            even though the total cash value is not impact
            </remarks>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityPortfolioManager.TotalUnleveredAbsoluteHoldingsCost">
            <summary>
            Absolute value of cash discounted from our total cash by the holdings we own.
            </summary>
            <remarks>When account has leverage the actual cash removed is a fraction of the purchase price according to the leverage</remarks>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityPortfolioManager.TotalAbsoluteHoldingsCost">
            <summary>
            Gets the total absolute holdings cost of the portfolio. This sums up the individual 
            absolute cost of each holding
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityPortfolioManager.TotalHoldingsValue">
            <summary>
            Absolute sum the individual items in portfolio.
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityPortfolioManager.HoldStock">
            <summary>
            Boolean flag indicating we have any holdings in the portfolio.
            </summary>
            <remarks>Assumes no asset can have $0 price and uses the sum of total holdings value</remarks>
            <seealso cref="P:VigiothCapital.QuantTrader.Securities.SecurityPortfolioManager.Invested"/>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityPortfolioManager.Invested">
            <summary>
            Alias for HoldStock. Check if we have and holdings.
            </summary>
            <seealso cref="P:VigiothCapital.QuantTrader.Securities.SecurityPortfolioManager.HoldStock"/>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityPortfolioManager.TotalUnrealisedProfit">
            <summary>
            Get the total unrealised profit in our portfolio from the individual security unrealized profits.
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityPortfolioManager.TotalUnrealizedProfit">
            <summary>
            Get the total unrealised profit in our portfolio from the individual security unrealized profits.
            </summary>
            <remarks>Added alias for American spelling</remarks>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityPortfolioManager.TotalPortfolioValue">
            <summary>
            Total portfolio value if we sold all holdings at current market rates.
            </summary>
            <remarks>Cash + TotalUnrealisedProfit + TotalUnleveredAbsoluteHoldingsCost</remarks>
            <seealso cref="P:VigiothCapital.QuantTrader.Securities.SecurityPortfolioManager.Cash"/>
            <seealso cref="P:VigiothCapital.QuantTrader.Securities.SecurityPortfolioManager.TotalUnrealizedProfit"/>
            <seealso cref="P:VigiothCapital.QuantTrader.Securities.SecurityPortfolioManager.TotalUnleveredAbsoluteHoldingsCost"/>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityPortfolioManager.TotalFees">
            <summary>
            Total fees paid during the algorithm operation across all securities in portfolio.
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityPortfolioManager.TotalProfit">
            <summary>
            Sum of all gross profit across all securities in portfolio.
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityPortfolioManager.TotalSaleVolume">
            <summary>
            Total sale volume since the start of algorithm operations.
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityPortfolioManager.TotalMarginUsed">
            <summary>
            Gets the total margin used across all securities in the account's currency
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityPortfolioManager.MarginRemaining">
            <summary>
            Gets the remaining margin on the account in the account's currency
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityPortfolioManager.MarginCallModel">
            <summary>
            Gets or sets the <see cref="P:VigiothCapital.QuantTrader.Securities.SecurityPortfolioManager.MarginCallModel"/> for the portfolio. This
            is used to executed margin call orders.
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityPortfolioManager.Item(VigiothCapital.QuantTrader.Symbol)">
            <summary>
            Indexer for the PortfolioManager class to access the underlying security holdings objects.
            </summary>
            <param name="symbol">Symbol object indexer</param>
            <returns>SecurityHolding class from the algorithm securities</returns>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityPortfolioManager.Item(System.String)">
            <summary>
            Indexer for the PortfolioManager class to access the underlying security holdings objects.
            </summary>
            <param name="ticker">string ticker symbol indexer</param>
            <returns>SecurityHolding class from the algorithm securities</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityPortfolioManager.SetCash(System.Decimal)">
            <summary>
            Set the base currrency cash this algorithm is to manage.
            </summary>
            <param name="cash">Decimal cash value of portfolio</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityPortfolioManager.SetCash(System.String,System.Decimal,System.Decimal)">
            <summary>
            Set the cash for the specified symbol
            </summary>
            <param name="symbol">The cash symbol to set</param>
            <param name="cash">Decimal cash value of portfolio</param>
            <param name="conversionRate">The current conversion rate for the</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityPortfolioManager.GetMarginRemaining(VigiothCapital.QuantTrader.Symbol,VigiothCapital.QuantTrader.Orders.OrderDirection)">
            <summary>
            Gets the margin available for trading a specific symbol in a specific direction.
            </summary>
            <param name="symbol">The symbol to compute margin remaining for</param>
            <param name="direction">The order/trading direction</param>
            <returns>The maximum order size that is currently executable in the specified direction</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityPortfolioManager.GetBuyingPower(VigiothCapital.QuantTrader.Symbol,VigiothCapital.QuantTrader.Orders.OrderDirection)">
            <summary>
            Gets the margin available for trading a specific symbol in a specific direction.
            Alias for <see cref="M:VigiothCapital.QuantTrader.Securities.SecurityPortfolioManager.GetMarginRemaining(VigiothCapital.QuantTrader.Symbol,VigiothCapital.QuantTrader.Orders.OrderDirection)"/>
            </summary>
            <param name="symbol">The symbol to compute margin remaining for</param>
            <param name="direction">The order/trading direction</param>
            <returns>The maximum order size that is currently executable in the specified direction</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityPortfolioManager.ProcessFill(VigiothCapital.QuantTrader.Orders.OrderEvent)">
            <summary>
            Calculate the new average price after processing a partial/complete order fill event. 
            </summary>
            <remarks>
                For purchasing stocks from zero holdings, the new average price is the sale price.
                When simply partially reducing holdings the average price remains the same.
                When crossing zero holdings the average price becomes the trade price in the new side of zero.
            </remarks>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityPortfolioManager.ScanForMarginCall(System.Boolean@)">
            <summary>
            Scan the portfolio and the updated data for a potential margin call situation which may get the holdings below zero! 
            If there is a margin call, liquidate the portfolio immediately before the portfolio gets sub zero.
            </summary>
            <param name="issueMarginCallWarning">Set to true if a warning should be issued to the algorithm</param>
            <returns>True for a margin call on the holdings.</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityPortfolioManager.ApplyDividend(VigiothCapital.QuantTrader.Data.Market.Dividend)">
            <summary>
            Applies a dividend to the portfolio
            </summary>
            <param name="dividend">The dividend to be applied</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityPortfolioManager.ApplySplit(VigiothCapital.QuantTrader.Data.Market.Split)">
            <summary>
            Applies a split to the portfolio
            </summary>
            <param name="split">The split to be applied</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityPortfolioManager.AddTransactionRecord(System.DateTime,System.Decimal)">
            <summary>
            Record the transaction value and time in a list to later be processed for statistics creation.
            </summary>
            <remarks>
            Bit of a hack -- but using datetime as dictionary key is dangerous as you can process multiple orders within a second.
            For the accounting / statistics generating purposes its not really critical to know the precise time, so just add a millisecond while there's an identical key.
            </remarks>
            <param name="time">Time of order processed </param>
            <param name="transactionProfitLoss">Profit Loss.</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityPortfolioManager.VigiothCapital#QuantTrader#Securities#ISecurityProvider#GetSecurity(VigiothCapital.QuantTrader.Symbol)">
            <summary>
            Retrieves a summary of the holdings for the specified symbol
            </summary>
            <param name="symbol">The symbol to get holdings for</param>
            <returns>The holdings for the symbol or null if the symbol is invalid and/or not in the portfolio</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityPortfolioManager.AddUnsettledCashAmount(VigiothCapital.QuantTrader.Securities.UnsettledCashAmount)">
            <summary>
            Adds an item to the list of unsettled cash amounts
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityPortfolioManager.ScanForCashSettlement(System.DateTime)">
            <summary>
            Scan the portfolio to check if unsettled funds should be settled
            </summary>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Securities.SecurityTransactionManager">
            <summary>
            Algorithm Transactions Manager - Recording Transactions
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityTransactionManager.UtcTime">
            <summary>
            Gets the time the security information was last updated
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityTransactionManager.#ctor(VigiothCapital.QuantTrader.Securities.SecurityManager)">
            <summary>
            Initialise the transaction manager for holding and processing orders.
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityTransactionManager.TransactionRecord">
            <summary>
            Trade record of profits and losses for each trade statistics calculations
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityTransactionManager.MinimumOrderSize">
            <summary>
            Configurable minimum order value to ignore bad orders, or orders with unrealistic sizes
            </summary>
            <remarks>Default minimum order size is $0 value</remarks>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityTransactionManager.MinimumOrderQuantity">
            <summary>
            Configurable minimum order size to ignore bad orders, or orders with unrealistic sizes
            </summary>
            <remarks>Default minimum order size is 0 shares</remarks>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityTransactionManager.LastOrderId">
            <summary>
            Get the last order id.
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityTransactionManager.MarketOrderFillTimeout">
            <summary>
            Configurable timeout for market order fills
            </summary>
            <remarks>Default value is 5 seconds</remarks>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityTransactionManager.ProcessRequest(VigiothCapital.QuantTrader.Orders.OrderRequest)">
            <summary>
            Processes the order request
            </summary>
            <param name="request">The request to be processed</param>
            <returns>The order ticket for the request</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityTransactionManager.AddOrder(VigiothCapital.QuantTrader.Orders.SubmitOrderRequest)">
            <summary>
            Add an order to collection and return the unique order id or negative if an error.
            </summary>
            <param name="request">A request detailing the order to be submitted</param>
            <returns>New unique, increasing orderid</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityTransactionManager.UpdateOrder(VigiothCapital.QuantTrader.Orders.UpdateOrderRequest)">
            <summary>
            Update an order yet to be filled such as stop or limit orders.
            </summary>
            <param name="request">Request detailing how the order should be updated</param>
            <remarks>Does not apply if the order is already fully filled</remarks>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityTransactionManager.CancelOrder(System.Int32)">
            <summary>
            Added alias for RemoveOrder - 
            </summary>
            <param name="orderId">Order id we wish to cancel</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityTransactionManager.CancelOpenOrders(VigiothCapital.QuantTrader.Symbol)">
            <summary>
            Cancels all open orders for the specified symbol
            </summary>
            <param name="symbol">The symbol whose orders are to be cancelled</param>
            <returns>List containing the cancelled order tickets</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityTransactionManager.RemoveOrder(System.Int32)">
            <summary>
            Remove this order from outstanding queue: user is requesting a cancel.
            </summary>
            <param name="orderId">Specific order id to remove</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityTransactionManager.GetOrderTickets(System.Func{VigiothCapital.QuantTrader.Orders.OrderTicket,System.Boolean})">
            <summary>
            Gets and enumerable of <see cref="T:VigiothCapital.QuantTrader.Orders.OrderTicket"/> matching the specified <paramref name="filter"/>
            </summary>
            <param name="filter">The filter predicate used to find the required order tickets</param>
            <returns>An enumerable of <see cref="T:VigiothCapital.QuantTrader.Orders.OrderTicket"/> matching the specified <paramref name="filter"/></returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityTransactionManager.GetOrderTicket(System.Int32)">
            <summary>
            Gets the order ticket for the specified order id. Returns null if not found
            </summary>
            <param name="orderId">The order's id</param>
            <returns>The order ticket with the specified id, or null if not found</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityTransactionManager.WaitForOrder(System.Int32)">
            <summary>
            Wait for a specific order to be either Filled, Invalid or Canceled
            </summary>
            <param name="orderId">The id of the order to wait for</param>
            <returns>True if we successfully wait for the fill, false if we were unable
            to wait. This may be because it is not a market order or because the timeout
            was reached</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityTransactionManager.GetOpenOrders">
            <summary>
            Get a list of all open orders.
            </summary>
            <returns>List of open orders.</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityTransactionManager.GetOpenOrders(VigiothCapital.QuantTrader.Symbol)">
            <summary>
            Get a list of all open orders for a symbol.
            </summary>
            <param name="symbol">The symbol for which to return the orders</param>
            <returns>List of open orders.</returns>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Securities.SecurityTransactionManager.OrdersCount">
            <summary>
            Gets the current number of orders that have been processed
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityTransactionManager.GetOrderById(System.Int32)">
            <summary>
            Get the order by its id
            </summary>
            <param name="orderId">Order id to fetch</param>
            <returns>The order with the specified id, or null if no match is found</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityTransactionManager.GetOrderByBrokerageId(System.String)">
            <summary>
            Gets the order by its brokerage id
            </summary>
            <param name="brokerageId">The brokerage id to fetch</param>
            <returns>The first order matching the brokerage id, or null if no match is found</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityTransactionManager.GetOrders(System.Func{VigiothCapital.QuantTrader.Orders.Order,System.Boolean})">
            <summary>
            Gets all orders matching the specified filter
            </summary>
            <param name="filter">Delegate used to filter the orders</param>
            <returns>All open orders this order provider currently holds</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityTransactionManager.GetSufficientCapitalForOrder(VigiothCapital.QuantTrader.Securities.SecurityPortfolioManager,VigiothCapital.QuantTrader.Orders.Order)">
            <summary>
            Check if there is sufficient capital to execute this order.
            </summary>
            <param name="portfolio">Our portfolio</param>
            <param name="order">Order we're checking</param>
            <returns>True if suficient capital.</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityTransactionManager.GetIncrementOrderId">
            <summary>
            Get a new order id, and increment the internal counter.
            </summary>
            <returns>New unique int order id.</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityTransactionManager.SetOrderProcessor(VigiothCapital.QuantTrader.Securities.IOrderProcessor)">
            <summary>
            Sets the <see cref="T:VigiothCapital.QuantTrader.Securities.IOrderProvider"/> used for fetching orders for the algorithm
            </summary>
            <param name="orderProvider">The <see cref="T:VigiothCapital.QuantTrader.Securities.IOrderProvider"/> to be used to manage fetching orders</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Securities.SecurityTransactionManager.Completed(VigiothCapital.QuantTrader.Orders.Order)">
            <summary>
            Returns true when the specified order is in a completed state
            </summary>
        </member>
        <member name="T:VigiothCapital.QuantTrader.SecurityIdentifier">
            <summary>
            Defines a unique identifier for securities
            </summary>
            <remarks>
            The SecurityIdentifier contains information about a specific security.
            This includes the symbol and other data specific to the SecurityType.
            The symbol is limited to 12 characters
            </remarks>
        </member>
        <member name="F:VigiothCapital.QuantTrader.SecurityIdentifier.Empty">
            <summary>
            Gets an instance of <see cref="T:VigiothCapital.QuantTrader.SecurityIdentifier"/> that is empty, that is, one with no symbol specified
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.SecurityIdentifier.DefaultDate">
            <summary>
            Gets the date to be used when it does not apply.
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.SecurityIdentifier.Date">
            <summary>
            Gets the date component of this identifier. For equities this
            is the first date the security traded. Technically speaking,
            in LEAN, this is the first date mentioned in the map_files.
            For options this is the expiry date. For futures this is the
            settlement date. For forex and cfds this property will throw an
            exception as the field is not specified.
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.SecurityIdentifier.Symbol">
            <summary>
            Gets the original symbol used to generate this security identifier.
            For equities, by convention this is the first ticker symbol for which
            the security traded
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.SecurityIdentifier.Market">
            <summary>
            Gets the market component of this security identifier. If located in the
            internal mappings, the full string is returned. If the value is unknown,
            the integer value is returned as a string.
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.SecurityIdentifier.SecurityType">
            <summary>
            Gets the security type component of this security identifier.
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.SecurityIdentifier.StrikePrice">
            <summary>
            Gets the option strike price. This only applies to SecurityType.Option
            and will thrown anexception if accessed otherwse.
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.SecurityIdentifier.OptionRight">
            <summary>
            Gets the option type component of this security identifier. This
            only applies to SecurityType.Open and will throw an exception if
            accessed otherwise.
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.SecurityIdentifier.OptionStyle">
            <summary>
            Gets the option style component of this security identifier. This
            only applies to SecurityType.Open and will throw an exception if
            accessed otherwise.
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.SecurityIdentifier.#ctor(System.String,System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:VigiothCapital.QuantTrader.SecurityIdentifier"/> class
            </summary>
            <param name="symbol">The base36 string encoded as a long using alpha [0-9A-Z]</param>
            <param name="properties">Other data defining properties of the symbol including market,
            security type, listing or expiry date, strike/call/put/style for options, ect...</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.SecurityIdentifier.GenerateOption(System.DateTime,System.String,System.String,System.Decimal,VigiothCapital.QuantTrader.OptionRight,VigiothCapital.QuantTrader.OptionStyle)">
            <summary>
            Generates a new <see cref="T:VigiothCapital.QuantTrader.SecurityIdentifier"/> for an option
            </summary>
            <param name="expiry">The date the option expires</param>
            <param name="underlying">The underlying security's symbol</param>
            <param name="market">The market</param>
            <param name="strike">The strike price</param>
            <param name="optionRight">The option type, call or put</param>
            <param name="optionStyle">The option style, American or European</param>
            <returns>A new <see cref="T:VigiothCapital.QuantTrader.SecurityIdentifier"/> representing the specified option security</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.SecurityIdentifier.GenerateEquity(System.String,System.String)">
            <summary>
            Helper overload that will search the mapfiles to resolve the first date. This implementation
            uses the configured <see cref="T:VigiothCapital.QuantTrader.Interfaces.IMapFileProvider"/> via the <see cref="F:VigiothCapital.QuantTrader.Util.Composer.Instance"/>
            </summary>
            <param name="symbol">The symbol as it is known today</param>
            <param name="market">The market</param>
            <returns>A new <see cref="T:VigiothCapital.QuantTrader.SecurityIdentifier"/> representing the specified symbol today</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.SecurityIdentifier.GenerateEquity(System.DateTime,System.String,System.String)">
            <summary>
            Generates a new <see cref="T:VigiothCapital.QuantTrader.SecurityIdentifier"/> for an equity
            </summary>
            <param name="date">The first date this security traded (in LEAN this is the first date in the map_file</param>
            <param name="symbol">The ticker symbol this security traded under on the <paramref name="date"/></param>
            <param name="market">The security's market</param>
            <returns>A new <see cref="T:VigiothCapital.QuantTrader.SecurityIdentifier"/> representing the specified equity security</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.SecurityIdentifier.GenerateBase(System.String,System.String)">
            <summary>
            Generates a new <see cref="T:VigiothCapital.QuantTrader.SecurityIdentifier"/> for a custom security
            </summary>
            <param name="symbol">The ticker symbol of this security</param>
            <param name="market">The security's market</param>
            <returns>A new <see cref="T:VigiothCapital.QuantTrader.SecurityIdentifier"/> representing the specified base security</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.SecurityIdentifier.GenerateForex(System.String,System.String)">
            <summary>
            Generates a new <see cref="T:VigiothCapital.QuantTrader.SecurityIdentifier"/> for a forex pair
            </summary>
            <param name="symbol">The currency pair in the format similar to: 'EURUSD'</param>
            <param name="market">The security's market</param>
            <returns>A new <see cref="T:VigiothCapital.QuantTrader.SecurityIdentifier"/> representing the specified forex pair</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.SecurityIdentifier.GenerateCfd(System.String,System.String)">
            <summary>
            Generates a new <see cref="T:VigiothCapital.QuantTrader.SecurityIdentifier"/> for a CFD security
            </summary>
            <param name="symbol">The CFD contract symbol</param>
            <param name="market">The security's market</param>
            <returns>A new <see cref="T:VigiothCapital.QuantTrader.SecurityIdentifier"/> representing the specified CFD security</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.SecurityIdentifier.Generate(System.DateTime,System.String,VigiothCapital.QuantTrader.SecurityType,System.String,System.Decimal,VigiothCapital.QuantTrader.OptionRight,VigiothCapital.QuantTrader.OptionStyle)">
            <summary>
            Generic generate method. This method should be used carefully as some parameters are not required and
            some parameters mean different things for different security types
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.SecurityIdentifier.DecodeBase36(System.String)">
            <summary>
            Converts an upper case alpha numeric string into a long
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.SecurityIdentifier.EncodeBase36(System.UInt64)">
            <summary>
            Converts a long to an uppercase alpha numeric string
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.SecurityIdentifier.NormalizeStrike(System.Decimal,System.UInt64@)">
            <summary>
            The strike is normalized into deci-cents and then a scale factor
            is also saved to bring it back to un-normalized
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.SecurityIdentifier.Pow(System.UInt32,System.Int32)">
            <summary>
            Accurately performs the integer exponentiation
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.SecurityIdentifier.Parse(System.String)">
            <summary>
            Parses the specified string into a <see cref="T:VigiothCapital.QuantTrader.SecurityIdentifier"/>
            The string must be a 40 digit number. The first 20 digits must be parseable
            to a 64 bit unsigned integer and contain ancillary data about the security.
            The second 20 digits must also be parseable as a 64 bit unsigned integer and
            contain the symbol encoded from base36, this provides for 12 alpha numeric case
            insensitive characters.
            </summary>
            <param name="value">The string value to be parsed</param>
            <returns>A new <see cref="T:VigiothCapital.QuantTrader.SecurityIdentifier"/> instance if the <paramref name="value"/> is able to be parsed.</returns>
            <exception cref="T:System.FormatException">This exception is thrown if the string's length is not exactly 40 characters, or
            if the components are unable to be parsed as 64 bit unsigned integers</exception>
        </member>
        <member name="M:VigiothCapital.QuantTrader.SecurityIdentifier.TryParse(System.String,VigiothCapital.QuantTrader.SecurityIdentifier@)">
            <summary>
            Attempts to parse the specified <see paramref="value"/> as a <see cref="T:VigiothCapital.QuantTrader.SecurityIdentifier"/>.
            </summary>
            <param name="value">The string value to be parsed</param>
            <param name="identifier">The result of parsing, when this function returns true, <paramref name="identifier"/>
            was properly created and reflects the input string, when this function returns false <paramref name="identifier"/>
            will equal default(SecurityIdentifier)</param>
            <returns>True on success, otherwise false</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.SecurityIdentifier.TryParse(System.String,VigiothCapital.QuantTrader.SecurityIdentifier@,System.Exception@)">
            <summary>
            Helper method impl to be used by parse and tryparse
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.SecurityIdentifier.TryParseProperties(System.String,System.Exception@,System.UInt64@,System.String@)">
            <summary>
            Parses the string into its component ulong pieces
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.SecurityIdentifier.ExtractFromProperties(System.UInt64,System.UInt64)">
            <summary>
            Extracts the embedded value from _otherData
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.SecurityIdentifier.Equals(VigiothCapital.QuantTrader.SecurityIdentifier)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.SecurityIdentifier.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:VigiothCapital.QuantTrader.SecurityIdentifier.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:VigiothCapital.QuantTrader.SecurityIdentifier.op_Equality(VigiothCapital.QuantTrader.SecurityIdentifier,VigiothCapital.QuantTrader.SecurityIdentifier)">
            <summary>
            Override equals operator
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.SecurityIdentifier.op_Inequality(VigiothCapital.QuantTrader.SecurityIdentifier,VigiothCapital.QuantTrader.SecurityIdentifier)">
            <summary>
            Override not equals operator
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.SecurityIdentifier.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:VigiothCapital.QuantTrader.SeriesSampler">
            <summary>
            A type capable of taking a chart and resampling using a linear interpolation strategy
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.SeriesSampler.#ctor(System.TimeSpan)">
            <summary>
            Creates a new SeriesSampler to sample Series data on the specified resolution
            </summary>
            <param name="resolution">The desired sampling resolution</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.SeriesSampler.Sample(VigiothCapital.QuantTrader.Series,System.DateTime,System.DateTime)">
            <summary>
            Samples the given series
            </summary>
            <param name="series">The series to be sampled</param>
            <param name="start">The date to start sampling, if before start of data then start of data will be used</param>
            <param name="stop">The date to stop sampling, if after stop of data, then stop of data will be used</param>
            <returns>The sampled series</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.SeriesSampler.SampleCharts(System.Collections.Generic.IDictionary{System.String,VigiothCapital.QuantTrader.Chart},System.DateTime,System.DateTime)">
            <summary>
            Samples the given charts
            </summary>
            <param name="charts">The charts to be sampled</param>
            <param name="start">The date to start sampling</param>
            <param name="stop">The date to stop sampling</param>
            <returns>The sampled charts</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.SeriesSampler.Interpolate(VigiothCapital.QuantTrader.ChartPoint,VigiothCapital.QuantTrader.ChartPoint,System.Int64)">
            <summary>
            Linear interpolation used for sampling
            </summary>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Chart">
            <summary>
            Single Parent Chart Object for Custom Charting
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.Chart.Name">
            Name of the Chart:
        </member>
        <member name="F:VigiothCapital.QuantTrader.Chart.ChartType">
            Type of the Chart, Overlayed or Stacked.
        </member>
        <member name="F:VigiothCapital.QuantTrader.Chart.Series">
            List of Series Objects for this Chart:
        </member>
        <member name="M:VigiothCapital.QuantTrader.Chart.#ctor">
            <summary>
            Default constructor for chart:
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Chart.#ctor(System.String,VigiothCapital.QuantTrader.ChartType)">
            <summary>
            Chart Constructor:
            </summary>
            <param name="name">Name of the Chart</param>
            <param name="type"> Type of the chart</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Chart.#ctor(System.String)">
            <summary>
            Constructor for a chart
            </summary>
            <param name="name">String name of the chart</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Chart.AddSeries(VigiothCapital.QuantTrader.Series)">
            <summary>
            Add a reference to this chart series:
            </summary>
            <param name="series">Chart series class object</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Chart.GetUpdates">
            <summary>
            Fetch the updates of the chart, and save the index position.
            </summary>
            <returns></returns>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Series">
            <summary>
            Chart Series Object - Series data and properties for a chart:
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.Series.Name">
            <summary>
            Name of the Series:
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.Series.Unit">
            <summary>
            Axis for the chart series.
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.Series.Index">
            <summary>
            Index/position of the series on the chart.
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.Series.Values">
            <summary>
             Values for the series plot:
            These values are assumed to be in ascending time order (first points earliest, last points latest)
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.Series.SeriesType">
            <summary>
            Chart type for the series:
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.Series.Color">
            <summary>
            Color the series 
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.Series.ScatterMarkerSymbol">
            <summary>
            Shape or symbol for the marker in a scatter plot
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.Series._updatePosition">
            Get the index of the last fetch update request to only retrieve the "delta" of the previous request.
        </member>
        <member name="M:VigiothCapital.QuantTrader.Series.#ctor">
            <summary>
            Default constructor for chart series
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Series.#ctor(System.String)">
            <summary>
            Constructor method for Chart Series
            </summary>
            <param name="name">Name of the chart series</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Series.#ctor(System.String,VigiothCapital.QuantTrader.SeriesType)">
            <summary>
            Foundational constructor on the series class
            </summary>
            <param name="name">Name of the series</param>
            <param name="type">Type of the series</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Series.#ctor(System.String,VigiothCapital.QuantTrader.SeriesType,System.Int32)">
            <summary>
            Foundational constructor on the series class
            </summary>
            <param name="name">Name of the series</param>
            <param name="type">Type of the series</param>
            <param name="index">Index position on the chart of the series</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Series.#ctor(System.String,VigiothCapital.QuantTrader.SeriesType,System.Int32,System.String)">
            <summary>
            Foundational constructor on the series class
            </summary>
            <param name="name">Name of the series</param>
            <param name="type">Type of the series</param>
            <param name="index">Index position on the chart of the series</param>
            <param name="unit">Unit for the series axis</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Series.#ctor(System.String,VigiothCapital.QuantTrader.SeriesType,System.String)">
            <summary>
            Constructor method for Chart Series
            </summary>
            <param name="name">Name of the chart series</param>
            <param name="type">Type of the chart series</param>
            <param name="unit">Unit of the serier</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Series.#ctor(System.String,VigiothCapital.QuantTrader.SeriesType,System.String,System.Drawing.Color)">
            <summary>
            Constructor method for Chart Series
            </summary>
            <param name="name">Name of the chart series</param>
            <param name="type">Type of the chart series</param>
            <param name="unit">Unit of the serier</param>
            <param name="color">Color of the series</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Series.#ctor(System.String,VigiothCapital.QuantTrader.SeriesType,System.String,System.Drawing.Color,VigiothCapital.QuantTrader.ScatterMarkerSymbol)">
            <summary>
            Constructor method for Chart Series
            </summary>
            <param name="name">Name of the chart series</param>
            <param name="type">Type of the chart series</param>
            <param name="unit">Unit of the serier</param>
            <param name="color">Color of the series</param>
            <param name="symbol">Symbol for the marker in a scatter plot series</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Series.AddPoint(System.DateTime,System.Decimal,System.Boolean)">
            <summary>
            Add a new point to this series:
            </summary>
            <param name="time">Time of the chart point</param>
            <param name="value">Value of the chart point</param>
            <param name="liveMode">This is a live mode point</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Series.GetUpdates">
            <summary>
            Get the updates since the last call to this function.
            </summary>
            <returns>List of the updates from the series</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Series.Purge">
            <summary>
            Removes the data from this series and resets the update position to 0
            </summary>
        </member>
        <member name="T:VigiothCapital.QuantTrader.ChartPoint">
            <summary>
            Single Chart Point Value Type for QCAlgorithm.Plot();
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.ChartPoint.x">
            Time of this chart point: lower case for javascript encoding simplicty
        </member>
        <member name="F:VigiothCapital.QuantTrader.ChartPoint.y">
            Value of this chart point:  lower case for javascript encoding simplicty
        </member>
        <member name="M:VigiothCapital.QuantTrader.ChartPoint.#ctor(System.DateTime,System.Decimal)">
            Constructor for datetime-value arguements:
        </member>
        <member name="M:VigiothCapital.QuantTrader.ChartPoint.#ctor(VigiothCapital.QuantTrader.ChartPoint)">
            Cloner Constructor:
        </member>
        <member name="M:VigiothCapital.QuantTrader.ChartPoint.ToString">
            <summary>
            Provides a readable string representation of this instance.
            </summary>
        </member>
        <member name="T:VigiothCapital.QuantTrader.SeriesType">
            <summary>
            Available types of charts
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.SeriesType.Line">
            Line Plot for Value Types
        </member>
        <member name="F:VigiothCapital.QuantTrader.SeriesType.Scatter">
            Scatter Plot for Chart Distinct Types
        </member>
        <member name="F:VigiothCapital.QuantTrader.SeriesType.Candle">
            Charts
        </member>
        <member name="F:VigiothCapital.QuantTrader.SeriesType.Bar">
            Bar chart.
        </member>
        <member name="F:VigiothCapital.QuantTrader.SeriesType.Flag">
            Flag indicators
        </member>
        <member name="T:VigiothCapital.QuantTrader.ChartType">
            <summary>
            Type of chart - should we draw the series as overlayed or stacked
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.ChartType.Overlay">
            Overlayed stacked
        </member>
        <member name="F:VigiothCapital.QuantTrader.ChartType.Stacked">
            Stacked series on top of each other.
        </member>
        <member name="T:VigiothCapital.QuantTrader.ScatterMarkerSymbol">
            <summary>
            Shape or symbol for the marker in a scatter plot
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.ScatterMarkerSymbol.None">
            Circle symbol
        </member>
        <member name="F:VigiothCapital.QuantTrader.ScatterMarkerSymbol.Circle">
            Circle symbol
        </member>
        <member name="F:VigiothCapital.QuantTrader.ScatterMarkerSymbol.Square">
            Square symbol
        </member>
        <member name="F:VigiothCapital.QuantTrader.ScatterMarkerSymbol.Diamond">
            Diamond symbol
        </member>
        <member name="F:VigiothCapital.QuantTrader.ScatterMarkerSymbol.Triangle">
            Triangle symbol
        </member>
        <member name="F:VigiothCapital.QuantTrader.ScatterMarkerSymbol.TriangleDown">
            Triangle-down symbol
        </member>
        <member name="T:VigiothCapital.QuantTrader.Isolator">
            <summary>
            Isolator class - create a new instance of the algorithm and ensure it doesn't 
            exceed memory or time execution limits.
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Isolator.CancellationTokenSource">
            <summary>
            Algo cancellation controls - cancel source.
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Isolator.CancellationToken">
            <summary>
            Algo cancellation controls - cancellation token for algorithm thread.
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Isolator.IsCancellationRequested">
            <summary>
            Check if this task isolator is cancelled, and exit the analysis
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Isolator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VigiothCapital.QuantTrader.Isolator"/> class
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Isolator.ExecuteWithTimeLimit(System.TimeSpan,System.Func{System.String},System.Action,System.Int64)">
            <summary>
            Execute a code block with a maximum limit on time and memory.
            </summary>
            <param name="timeSpan">Timeout in timespan</param>
            <param name="withinCustomLimits">Function used to determine if the codeBlock is within custom limits, such as with algorithm manager
            timing individual time loops, return a non-null and non-empty string with a message indicating the error/reason for stoppage</param>
            <param name="codeBlock">Action codeblock to execute</param>
            <param name="memoryCap">Maximum memory allocation, default 1024Mb</param>
            <returns>True if algorithm exited successfully, false if cancelled because it exceeded limits.</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Isolator.ExecuteWithTimeLimit(System.TimeSpan,System.Action,System.Int64)">
            <summary>
            Execute a code block with a maximum limit on time and memory.
            </summary>
            <param name="timeSpan">Timeout in timespan</param>
            <param name="codeBlock">Action codeblock to execute</param>
            <param name="memoryCap">Maximum memory allocation, default 1024Mb</param>
            <returns>True if algorithm exited successfully, false if cancelled because it exceeded limits.</returns>
        </member>
        <member name="T:VigiothCapital.QuantTrader.DateFormat">
            <summary>
            Shortcut date format strings
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.DateFormat.SixCharacter">
            Year-Month-Date 6 Character Date Representation
        </member>
        <member name="F:VigiothCapital.QuantTrader.DateFormat.EightCharacter">
            YYYY-MM-DD Eight Character Date Representation
        </member>
        <member name="F:VigiothCapital.QuantTrader.DateFormat.TwelveCharacter">
            Daily and hourly time format
        </member>
        <member name="F:VigiothCapital.QuantTrader.DateFormat.JsonFormat">
            JSON Format Date Representation
        </member>
        <member name="F:VigiothCapital.QuantTrader.DateFormat.DB">
            MySQL Format Date Representation
        </member>
        <member name="F:VigiothCapital.QuantTrader.DateFormat.UI">
            VigiothCapital.QuantTrader UX Date Representation
        </member>
        <member name="F:VigiothCapital.QuantTrader.DateFormat.US">
            en-US format
        </member>
        <member name="F:VigiothCapital.QuantTrader.DateFormat.Forex">
            Date format of QC forex data
        </member>
        <member name="T:VigiothCapital.QuantTrader.Holding">
            <summary>
            Singular holding of assets from backend live nodes:
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.Holding.Symbol">
            Symbol of the Holding:
        </member>
        <member name="F:VigiothCapital.QuantTrader.Holding.Type">
            Type of the security
        </member>
        <member name="F:VigiothCapital.QuantTrader.Holding.CurrencySymbol">
            The currency symbol of the holding, such as $
        </member>
        <member name="F:VigiothCapital.QuantTrader.Holding.AveragePrice">
            Average Price of our Holding in the currency the symbol is traded in
        </member>
        <member name="F:VigiothCapital.QuantTrader.Holding.Quantity">
            Quantity of Symbol We Hold.
        </member>
        <member name="F:VigiothCapital.QuantTrader.Holding.MarketPrice">
            Current Market Price of the Asset in the currency the symbol is traded in
        </member>
        <member name="F:VigiothCapital.QuantTrader.Holding.ConversionRate">
            Current market conversion rate into the account currency
        </member>
        <member name="M:VigiothCapital.QuantTrader.Holding.#ctor">
            Create a new default holding:
        </member>
        <member name="M:VigiothCapital.QuantTrader.Holding.#ctor(VigiothCapital.QuantTrader.Securities.Security)">
            <summary>
            Create a simple JSON holdings from a Security holding class.
            </summary>
            <param name="security">The security instance</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Holding.Clone">
            <summary>
            Clones this instance
            </summary>
            <returns>A new Holding object with the same values as this one</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Holding.ToString">
            <summary>
            Writes out the properties of this instance to string
            </summary>
        </member>
        <member name="T:VigiothCapital.QuantTrader.RunMode">
            <summary>
            Processing runmode of the backtest.
            </summary>
            <obsolete>The runmode enum is now obsolete and all tasks are run in series mode. This was done to ensure algorithms have memory of the day before.</obsolete>
        </member>
        <member name="F:VigiothCapital.QuantTrader.RunMode.Automatic">
            Automatically detect the runmode of the algorithm: series for minute data, parallel for second-tick
        </member>
        <member name="F:VigiothCapital.QuantTrader.RunMode.Series">
            Series runmode for the algorithm
        </member>
        <member name="F:VigiothCapital.QuantTrader.RunMode.Parallel">
            Parallel runmode for the algorithm
        </member>
        <member name="T:VigiothCapital.QuantTrader.Language">
            <summary>
            Multilanguage support enum: which language is this project for the interop bridge converter.
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.Language.CSharp">
            <summary>
            C# Language Project
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.Language.FSharp">
            <summary>
            FSharp Project
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.Language.VisualBasic">
            <summary>
            Visual Basic Project
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.Language.Java">
            <summary>
            Java Language Project
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.Language.Python">
            <summary>
            Python Language Project
            </summary>
        </member>
        <member name="T:VigiothCapital.QuantTrader.UserPlan">
            <summary>
            User / Algorithm Job Subscription Level
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.UserPlan.Free">
            <summary>
            Free User (Backtesting).
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.UserPlan.Hobbyist">
            <summary>
            Hobbyist User with Included 512mb Server.
            </summary>
        </member>
        <member name="T:VigiothCapital.QuantTrader.ServerType">
            <summary>
            Live server types available through the web IDE. / QC deployment.
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.ServerType.Server512">
            <summary>
            Additional server
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.ServerType.Server1024">
            <summary>
            Upgraded server
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.ServerType.Server2048">
            <summary>
            Server with 2048 MB Ram.
            </summary>
        </member>
        <member name="T:VigiothCapital.QuantTrader.SecurityType">
            <summary>
            Type of tradable security / underlying asset
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.SecurityType.Base">
            <summary>
            Base class for all security types:
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.SecurityType.Equity">
            <summary>
            US Equity Security
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.SecurityType.Option">
            <summary>
            Option Security Type
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.SecurityType.Commodity">
            <summary>
            Commodity Security Type
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.SecurityType.Forex">
            <summary>
            FOREX Security
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.SecurityType.Future">
            <summary>
            Future Security Type
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.SecurityType.Cfd">
            <summary>
            Contract For a Difference Security Type.
            </summary>
        </member>
        <member name="T:VigiothCapital.QuantTrader.AccountType">
            <summary>
            Account type: margin or cash
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.AccountType.Margin">
            <summary>
            Margin account type
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.AccountType.Cash">
            <summary>
            Cash account type
            </summary>
        </member>
        <member name="T:VigiothCapital.QuantTrader.MarketDataType">
            <summary>
            Market data style: is the market data a summary (OHLC style) bar, or is it a time-price value.
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.MarketDataType.Base">
            Base market data type
        </member>
        <member name="F:VigiothCapital.QuantTrader.MarketDataType.TradeBar">
            TradeBar market data type (OHLC summary bar)
        </member>
        <member name="F:VigiothCapital.QuantTrader.MarketDataType.Tick">
            Tick market data type (price-time pair)
        </member>
        <member name="F:VigiothCapital.QuantTrader.MarketDataType.Auxiliary">
            Data associated with an instrument
        </member>
        <member name="F:VigiothCapital.QuantTrader.MarketDataType.QuoteBar">
            QuoteBar market data type [Bid(OHLC), Ask(OHLC) and Mid(OHLC) summary bar]
        </member>
        <member name="F:VigiothCapital.QuantTrader.MarketDataType.OptionChain">
            Option chain data
        </member>
        <member name="T:VigiothCapital.QuantTrader.DataFeedEndpoint">
            <summary>
            Datafeed enum options for selecting the source of the datafeed.
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.DataFeedEndpoint.Backtesting">
            Backtesting Datafeed Endpoint
        </member>
        <member name="F:VigiothCapital.QuantTrader.DataFeedEndpoint.FileSystem">
            Loading files off the local system
        </member>
        <member name="F:VigiothCapital.QuantTrader.DataFeedEndpoint.LiveTrading">
            Getting datafeed from a QC-Live-Cloud
        </member>
        <member name="F:VigiothCapital.QuantTrader.DataFeedEndpoint.Database">
            Database
        </member>
        <member name="T:VigiothCapital.QuantTrader.StoragePermissions">
            <summary>
            Cloud storage permission options.
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.StoragePermissions.Public">
            Public Storage Permissions
        </member>
        <member name="F:VigiothCapital.QuantTrader.StoragePermissions.Authenticated">
            Authenticated Read Storage Permissions
        </member>
        <member name="T:VigiothCapital.QuantTrader.TickType">
            <summary>
            Types of tick data - trades or quote ticks.
            </summary>
            <remarks>VigiothCapital.QuantTrader currently only has trade tick data but can handle quote tick data with the same data structures.</remarks>
        </member>
        <member name="F:VigiothCapital.QuantTrader.TickType.Trade">
            Trade type tick object.
        </member>
        <member name="F:VigiothCapital.QuantTrader.TickType.Quote">
            Quote type tick object.
        </member>
        <member name="T:VigiothCapital.QuantTrader.DelistingType">
            <summary>
            Specifies the type of <see cref="T:VigiothCapital.QuantTrader.Data.Market.Delisting"/> data
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.DelistingType.Warning">
            <summary>
            Specifies a warning of an imminent delisting
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.DelistingType.Delisted">
            <summary>
            Specifies the symbol has been delisted
            </summary>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Resolution">
            <summary>
            Resolution of data requested.
            </summary>
            <remarks>Always sort the enum from the smallest to largest resolution</remarks>
        </member>
        <member name="F:VigiothCapital.QuantTrader.Resolution.Tick">
            Tick Resolution (1)
        </member>
        <member name="F:VigiothCapital.QuantTrader.Resolution.Second">
            Second Resolution (2)
        </member>
        <member name="F:VigiothCapital.QuantTrader.Resolution.Minute">
            Minute Resolution (3)
        </member>
        <member name="F:VigiothCapital.QuantTrader.Resolution.Hour">
            Hour Resolution (4)
        </member>
        <member name="F:VigiothCapital.QuantTrader.Resolution.Daily">
            Daily Resolution (5)
        </member>
        <member name="T:VigiothCapital.QuantTrader.OptionRight">
            <summary>
            Specifies the different types of options
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.OptionRight.Call">
            <summary>
            A call option, the right to buy at the strike price
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.OptionRight.Put">
            <summary>
            A put option, the right to sell at the strike price
            </summary>
        </member>
        <member name="T:VigiothCapital.QuantTrader.OptionStyle">
            <summary>
            Specifies the style of an option
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.OptionStyle.American">
            <summary>
            American style options are able to be exercised at any time on or before the expiration date
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.OptionStyle.European">
            <summary>
            European style options are able to be exercised on the expiration date only.
            </summary>
        </member>
        <member name="T:VigiothCapital.QuantTrader.AlgorithmControl">
            <summary>
            Wrapper for algorithm status enum to include the charting subscription.
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.AlgorithmControl.#ctor">
            <summary>
            Default initializer for algorithm control class.
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.AlgorithmControl.Status">
            <summary>
            Current run status of the algorithm id.
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.AlgorithmControl.ChartSubscription">
            <summary>
            Currently requested chart.
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.AlgorithmControl.HasSubscribers">
            <summary>
            True if there's subscribers on the channel
            </summary>
        </member>
        <member name="T:VigiothCapital.QuantTrader.AlgorithmStatus">
            <summary>
            States of a live deployment.
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.AlgorithmStatus.DeployError">
            Error compiling algorithm at start
        </member>
        <member name="F:VigiothCapital.QuantTrader.AlgorithmStatus.InQueue">
            Waiting for a server
        </member>
        <member name="F:VigiothCapital.QuantTrader.AlgorithmStatus.Running">
            Running algorithm
        </member>
        <member name="F:VigiothCapital.QuantTrader.AlgorithmStatus.Stopped">
            Stopped algorithm or exited with runtime errors
        </member>
        <member name="F:VigiothCapital.QuantTrader.AlgorithmStatus.Liquidated">
            Liquidated algorithm
        </member>
        <member name="F:VigiothCapital.QuantTrader.AlgorithmStatus.Deleted">
            Algorithm has been deleted
        </member>
        <member name="F:VigiothCapital.QuantTrader.AlgorithmStatus.Completed">
            Algorithm completed running
        </member>
        <member name="F:VigiothCapital.QuantTrader.AlgorithmStatus.RuntimeError">
            Runtime Error Stoped Algorithm
        </member>
        <member name="F:VigiothCapital.QuantTrader.AlgorithmStatus.Invalid">
            Error in the algorithm id (not used).
        </member>
        <member name="F:VigiothCapital.QuantTrader.AlgorithmStatus.LoggingIn">
            The algorithm is logging into the brokerage
        </member>
        <member name="F:VigiothCapital.QuantTrader.AlgorithmStatus.Initializing">
            The algorithm is initializing
        </member>
        <member name="F:VigiothCapital.QuantTrader.AlgorithmStatus.History">
            History status update
        </member>
        <member name="T:VigiothCapital.QuantTrader.SubscriptionTransportMedium">
            <summary>
            Specifies where a subscription's data comes from
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.SubscriptionTransportMedium.LocalFile">
            <summary>
            The subscription's data comes from disk
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.SubscriptionTransportMedium.RemoteFile">
            <summary>
            The subscription's data is downloaded from a remote source
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.SubscriptionTransportMedium.Rest">
            <summary>
            The subscription's data comes from a rest call that is polled and returns a single line/data point of information
            </summary>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Period">
            <summary>
            enum Period - Enum of all the analysis periods, AS integers. Reference "Period" Array to access the values
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.Period.TenSeconds">
            Period Short Codes - 10
        </member>
        <member name="F:VigiothCapital.QuantTrader.Period.ThirtySeconds">
            Period Short Codes - 30 Second
        </member>
        <member name="F:VigiothCapital.QuantTrader.Period.OneMinute">
            Period Short Codes - 60 Second
        </member>
        <member name="F:VigiothCapital.QuantTrader.Period.TwoMinutes">
            Period Short Codes - 120 Second
        </member>
        <member name="F:VigiothCapital.QuantTrader.Period.ThreeMinutes">
            Period Short Codes - 180 Second
        </member>
        <member name="F:VigiothCapital.QuantTrader.Period.FiveMinutes">
            Period Short Codes - 300 Second
        </member>
        <member name="F:VigiothCapital.QuantTrader.Period.TenMinutes">
            Period Short Codes - 600 Second
        </member>
        <member name="F:VigiothCapital.QuantTrader.Period.FifteenMinutes">
            Period Short Codes - 900 Second
        </member>
        <member name="F:VigiothCapital.QuantTrader.Period.TwentyMinutes">
            Period Short Codes - 1200 Second
        </member>
        <member name="F:VigiothCapital.QuantTrader.Period.ThirtyMinutes">
            Period Short Codes - 1800 Second
        </member>
        <member name="F:VigiothCapital.QuantTrader.Period.OneHour">
            Period Short Codes - 3600 Second
        </member>
        <member name="F:VigiothCapital.QuantTrader.Period.TwoHours">
            Period Short Codes - 7200 Second
        </member>
        <member name="F:VigiothCapital.QuantTrader.Period.FourHours">
            Period Short Codes - 14400 Second
        </member>
        <member name="F:VigiothCapital.QuantTrader.Period.SixHours">
            Period Short Codes - 21600 Second
        </member>
        <member name="T:VigiothCapital.QuantTrader.DataNormalizationMode">
            <summary>
            Specifies how data is normalized before being sent into an algorithm
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.DataNormalizationMode.Raw">
            <summary>
            The raw price with dividends added to cash book
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.DataNormalizationMode.Adjusted">
            <summary>
            The adjusted prices with splits and dividendends factored in
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.DataNormalizationMode.SplitAdjusted">
            <summary>
            The adjusted prices with only splits factored in, dividends paid out to the cash book
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.DataNormalizationMode.TotalReturn">
            <summary>
            The split adjusted price plus dividends
            </summary>
        </member>
        <member name="T:VigiothCapital.QuantTrader.MarketCodes">
            <summary>
            Global Market Short Codes and their full versions: (used in tick objects)
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.MarketCodes.US">
            US Market Codes
        </member>
        <member name="F:VigiothCapital.QuantTrader.MarketCodes.Canada">
            Canada Market Short Codes:
        </member>
        <member name="T:VigiothCapital.QuantTrader.ChannelStatus">
            <summary>
            Defines the different channel status values
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.ChannelStatus.Vacated">
            <summary>
            The channel is empty
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.ChannelStatus.Occupied">
            <summary>
            The channel has subscribers
            </summary>
        </member>
        <member name="T:VigiothCapital.QuantTrader.USHoliday">
            <summary>
            US Public Holidays - Not Tradeable:
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.USHoliday.Dates">
            <summary>
            Public Holidays
            </summary>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Extensions">
            <summary>
            Extensions function collections - group all static extensions functions here.
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Extensions.Move``1(System.Collections.Generic.List{``0},System.Int32,System.Int32)">
            <summary>
            Extension to move one element from list from A to position B.
            </summary>
            <typeparam name="T">Type of list</typeparam>
            <param name="list">List we're operating on.</param>
            <param name="oldIndex">Index of variable we want to move.</param>
            <param name="newIndex">New location for the variable</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Extensions.GetBytes(System.String)">
            <summary>
            Extension method to convert a string into a byte array
            </summary>
            <param name="str">String to convert to bytes.</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Extensions.Clear``1(System.Collections.Concurrent.ConcurrentQueue{``0})">
            <summary>
            Extentsion method to clear all items from a thread safe queue
            </summary>
            <remarks>Small risk of race condition if a producer is adding to the list.</remarks>
            <typeparam name="T">Queue type</typeparam>
            <param name="queue">queue object</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Extensions.GetString(System.Byte[])">
            <summary>
            Extension method to convert a byte array into a string.
            </summary>
            <param name="bytes">Byte array to convert.</param>
            <returns>String from bytes.</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Extensions.ToMD5(System.String)">
            <summary>
            Extension method to convert a string to a MD5 hash.
            </summary>
            <param name="str">String we want to MD5 encode.</param>
            <returns>MD5 hash of a string</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Extensions.AddOrUpdate``2(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},``0,``1)">
            <summary>
            Extension method to automatically set the update value to same as "add" value for TryAddUpdate. 
            This makes the API similar for traditional and concurrent dictionaries.
            </summary>
            <typeparam name="K">Key type for dictionary</typeparam>
            <typeparam name="V">Value type for dictonary</typeparam>
            <param name="dictionary">Dictionary object we're operating on</param>
            <param name="key">Key we want to add or update.</param>
            <param name="value">Value we want to set.</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Extensions.Add``3(System.Collections.Generic.IDictionary{``0,``2},``0,``1)">
            <summary>
            Adds the specified element to the collection with the specified key. If an entry does not exist for th
            specified key then one will be created.
            </summary>
            <typeparam name="TKey">The key type</typeparam>
            <typeparam name="TElement">The collection element type</typeparam>
            <typeparam name="TCollection">The collection type</typeparam>
            <param name="dictionary">The source dictionary to be added to</param>
            <param name="key">The key</param>
            <param name="element">The element to be added</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Extensions.RoundToSignificantDigits(System.Double,System.Int32)">
            <summary>
            Extension method to round a double value to a fixed number of significant figures instead of a fixed decimal places.
            </summary>
            <param name="d">Double we're rounding</param>
            <param name="digits">Number of significant figures</param>
            <returns>New double rounded to digits-significant figures</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Extensions.RoundToSignificantDigits(System.Decimal,System.Int32)">
            <summary>
            Extension method to round a double value to a fixed number of significant figures instead of a fixed decimal places.
            </summary>
            <param name="d">Double we're rounding</param>
            <param name="digits">Number of significant figures</param>
            <returns>New double rounded to digits-significant figures</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Extensions.SmartRounding(System.Decimal)">
            <summary>
            Provides global smart rounding, numbers larger than 1000 will round to 4 decimal places,
            while numbers smaller will round to 7 significant digits
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Extensions.SafeDecimalCast(System.Double)">
            <summary>
            Casts the specified input value to a decimal while acknowledging the overflow conditions
            </summary>
            <param name="input">The value to be cast</param>
            <returns>The input value as a decimal, if the value is too large or to small to be represented
            as a decimal, then the closest decimal value will be returned</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Extensions.ToDecimal(System.String)">
            <summary>
            Extension method for faster string to decimal conversion. 
            </summary>
            <param name="str">String to be converted to positive decimal value</param>
            <remarks>Method makes some assuptions - always numbers, no "signs" +,- etc.</remarks>
            <returns>Decimal value of the string</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Extensions.ToInt32(System.String)">
            <summary>
            Extension method for faster string to Int32 conversion. 
            </summary>
            <param name="str">String to be converted to positive Int32 value</param>
            <remarks>Method makes some assuptions - always numbers, no "signs" +,- etc.</remarks>
            <returns>Int32 value of the string</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Extensions.ToInt64(System.String)">
            <summary>
            Extension method for faster string to Int64 conversion. 
            </summary>
            <param name="str">String to be converted to positive Int64 value</param>
            <remarks>Method makes some assuptions - always numbers, no "signs" +,- etc.</remarks>
            <returns>Int32 value of the string</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Extensions.ToCsv(System.String,System.Int32)">
            <summary>
            Breaks the specified string into csv components, all commas are considered separators
            </summary>
            <param name="str">The string to be broken into csv</param>
            <param name="size">The expected size of the output list</param>
            <returns>A list of the csv pieces</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Extensions.IsNaNOrZero(System.Double)">
            <summary>
            Check if a number is NaN or equal to zero
            </summary>
            <param name="value">The double value to check</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Extensions.GetDecimalEpsilon">
            <summary>
            Gets the smallest positive number that can be added to a decimal instance and return
            a new value that does not == the old value
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Extensions.GetExtension(System.String)">
            <summary>
            Extension method to extract the extension part of this file name if it matches a safe list, or return a ".custom" extension for ones which do not match.
            </summary>
            <param name="str">String we're looking for the extension for.</param>
            <returns>Last 4 character string of string.</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Extensions.ToStream(System.String)">
            <summary>
            Extension method to convert strings to stream to be read.
            </summary>
            <param name="str">String to convert to stream</param>
            <returns>Stream instance</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Extensions.Round(System.TimeSpan,System.TimeSpan,System.MidpointRounding)">
            <summary>
            Extension method to round a timeSpan to nearest timespan period.
            </summary>
            <param name="time">TimeSpan To Round</param>
            <param name="roundingInterval">Rounding Unit</param>
            <param name="roundingType">Rounding method</param>
            <returns>Rounded timespan</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Extensions.Round(System.TimeSpan,System.TimeSpan)">
            <summary>
            Extension method to round timespan to nearest timespan period.
            </summary>
            <param name="time">Base timespan we're looking to round.</param>
            <param name="roundingInterval">Timespan period we're rounding.</param>
            <returns>Rounded timespan period</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Extensions.RoundDown(System.DateTime,System.TimeSpan)">
            <summary>
            Extension method to round a datetime down by a timespan interval.
            </summary>
            <param name="dateTime">Base DateTime object we're rounding down.</param>
            <param name="interval">Timespan interval to round to.</param>
            <returns>Rounded datetime</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Extensions.ExchangeRoundDown(System.DateTime,System.TimeSpan,VigiothCapital.QuantTrader.Securities.SecurityExchangeHours,System.Boolean)">
            <summary>
            Extension method to round a datetime down by a timespan interval until it's
            within the specified exchange's open hours. This works by first rounding down
            the specified time using the interval, then producing a bar between that
            rounded time and the interval plus the rounded time and incrementally walking
            backwards until the exchange is open
            </summary>
            <param name="dateTime">Time to be rounded down</param>
            <param name="interval">Timespan interval to round to.</param>
            <param name="exchangeHours">The exchange hours to determine open times</param>
            <param name="extendedMarket">True for extended market hours, otherwise false</param>
            <returns>Rounded datetime</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Extensions.Round(System.DateTime,System.TimeSpan)">
            <summary>
            Extension method to round a datetime to the nearest unit timespan.
            </summary>
            <param name="datetime">Datetime object we're rounding.</param>
            <param name="roundingInterval">Timespan rounding period.s</param>
            <returns>Rounded datetime</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Extensions.RoundUp(System.DateTime,System.TimeSpan)">
            <summary>
            Extension method to explicitly round up to the nearest timespan interval.
            </summary>
            <param name="time">Base datetime object to round up.</param>
            <param name="d">Timespan interval for rounding</param>
            <returns>Rounded datetime</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Extensions.ConvertTo(System.DateTime,NodaTime.DateTimeZone,NodaTime.DateTimeZone,System.Boolean)">
            <summary>
            Converts the specified time from the <paramref name="from"/> time zone to the <paramref name="to"/> time zone
            </summary>
            <param name="time">The time to be converted in terms of the <paramref name="from"/> time zone</param>
            <param name="from">The time zone the specified <paramref name="time"/> is in</param>
            <param name="to">The time zone to be converted to</param>
            <param name="strict">True for strict conversion, this will throw during ambiguitities, false for lenient conversion</param>
            <returns>The time in terms of the to time zone</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Extensions.ConvertFromUtc(System.DateTime,NodaTime.DateTimeZone,System.Boolean)">
            <summary>
            Converts the specified time from UTC to the <paramref name="to"/> time zone
            </summary>
            <param name="time">The time to be converted expressed in UTC</param>
            <param name="to">The destinatio time zone</param>
            <param name="strict">True for strict conversion, this will throw during ambiguitities, false for lenient conversion</param>
            <returns>The time in terms of the <paramref name="to"/> time zone</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Extensions.ConvertToUtc(System.DateTime,NodaTime.DateTimeZone,System.Boolean)">
            <summary>
            Converts the specified time from the <paramref name="from"/> time zone to <see cref="F:VigiothCapital.QuantTrader.TimeZones.Utc"/>
            </summary>
            <param name="time">The time to be converted in terms of the <paramref name="from"/> time zone</param>
            <param name="from">The time zone the specified <paramref name="time"/> is in</param>
            <param name="strict">True for strict conversion, this will throw during ambiguitities, false for lenient conversion</param>
            <returns>The time in terms of the to time zone</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Extensions.Reset(System.Timers.Timer)">
            <summary>
            Add the reset method to the System.Timer class.
            </summary>
            <param name="timer">System.timer object</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Extensions.MatchesTypeName(System.Type,System.String)">
            <summary>
            Function used to match a type against a string type name. This function compares on the AssemblyQualfiedName,
            the FullName, and then just the Name of the type.
            </summary>
            <param name="type">The type to test for a match</param>
            <param name="typeName">The name of the type to match</param>
            <returns>True if the specified type matches the type name, false otherwise</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Extensions.IsSubclassOfGeneric(System.Type,System.Type)">
            <summary>
            Checks the specified type to see if it is a subclass of the <paramref name="possibleSuperType"/>. This method will
            crawl up the inheritance heirarchy to check for equality using generic type definitions (if exists)
            </summary>
            <param name="type">The type to be checked as a subclass of <paramref name="possibleSuperType"/></param>
            <param name="possibleSuperType">The possible superclass of <paramref name="type"/></param>
            <returns>True if <paramref name="type"/> is a subclass of the generic type definition <paramref name="possibleSuperType"/></returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Extensions.GetBetterTypeName(System.Type)">
            <summary>
            Gets a type's name with the generic parameters filled in the way they would look when
            defined in code, such as converting Dictionary&lt;`1,`2&gt; to Dictionary&lt;string,int&gt;
            </summary>
            <param name="type">The type who's name we seek</param>
            <returns>A better type name</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Extensions.ToTimeSpan(VigiothCapital.QuantTrader.Resolution)">
            <summary>
            Converts the Resolution instance into a TimeSpan instance
            </summary>
            <param name="resolution">The resolution to be converted</param>
            <returns>A TimeSpan instance that represents the resolution specified</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Extensions.ConvertTo``1(System.String)">
            <summary>
            Converts the specified string value into the specified type
            </summary>
            <typeparam name="T">The output type</typeparam>
            <param name="value">The string value to be converted</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Extensions.ConvertTo(System.String,System.Type)">
            <summary>
            Converts the specified string value into the specified type
            </summary>
            <param name="value">The string value to be converted</param>
            <param name="type">The output type</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Extensions.WaitOne(System.Threading.WaitHandle,System.Threading.CancellationToken)">
            <summary>
            Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle"/> receives a signal, while observing a <see cref="T:System.Threading.CancellationToken"/>.
            </summary>
            <param name="waitHandle">The wait handle to wait on</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to observe.</param>
            <exception cref="T:System.InvalidOperationException">The maximum number of waiters has been exceeded.</exception>
            <exception cref="T:System.OperationCanceledExcepton"><paramref name="cancellationToken"/> was canceled.</exception>
            <exception cref="T:System.ObjectDisposedException">The object has already been disposed or the <see cref="T:System.Threading.CancellationTokenSource"/> that created <paramref name="cancellationToken"/> has been disposed.</exception>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Extensions.WaitOne(System.Threading.WaitHandle,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle"/> is set, using a <see cref="T:System.TimeSpan"/> to measure the time interval, while observing a <see cref="T:System.Threading.CancellationToken"/>.
            </summary>
            
            <returns>
            true if the <see cref="T:System.Threading.WaitHandle"/> was set; otherwise, false.
            </returns>
            <param name="waitHandle">The wait handle to wait on</param>
            <param name="timeout">A <see cref="T:System.TimeSpan"/> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan"/> that represents -1 milliseconds to wait indefinitely.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to observe.</param>
            <exception cref="T:System.Threading.OperationCanceledException"><paramref name="cancellationToken"/> was canceled.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout"/> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <see cref="F:System.Int32.MaxValue"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The maximum number of waiters has been exceeded. </exception><exception cref="T:System.ObjectDisposedException">The object has already been disposed or the <see cref="T:System.Threading.CancellationTokenSource"/> that created <paramref name="cancellationToken"/> has been disposed.</exception>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Extensions.WaitOne(System.Threading.WaitHandle,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle"/> is set, using a 32-bit signed integer to measure the time interval, while observing a <see cref="T:System.Threading.CancellationToken"/>.
            </summary>
            
            <returns>
            true if the <see cref="T:System.Threading.WaitHandle"/> was set; otherwise, false.
            </returns>
            <param name="waitHandle">The wait handle to wait on</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite"/>(-1) to wait indefinitely.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to observe.</param>
            <exception cref="T:System.Threading.OperationCanceledException"><paramref name="cancellationToken"/> was canceled.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="millisecondsTimeout"/> is a negative number other than -1, which represents an infinite time-out.</exception>
            <exception cref="T:System.InvalidOperationException">The maximum number of waiters has been exceeded.</exception>
            <exception cref="T:System.ObjectDisposedException">The object has already been disposed or the <see cref="T:System.Threading.CancellationTokenSource"/> that created <paramref name="cancellationToken"/> has been disposed.</exception>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Extensions.GetMD5Hash(System.IO.Stream)">
            <summary>
            Gets the MD5 hash from a stream
            </summary>
            <param name="stream">The stream to compute a hash for</param>
            <returns>The MD5 hash</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Extensions.WithEmbeddedHtmlAnchors(System.String)">
            <summary>
            Convert a string into the same string with a URL! :)
            </summary>
            <param name="source">The source string to be converted</param>
            <returns>The same source string but with anchor tags around substrings matching a link regex</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Extensions.ToLower(System.Enum)">
            <summary>
            Converts the specified <paramref name="enum"/> value to its corresponding lower-case string representation
            </summary>
            <param name="enum">The enumeration value</param>
            <returns>A lower-case string representation of the specified enumeration value</returns>
        </member>
        <member name="T:VigiothCapital.QuantTrader.OS">
            <summary>
            Operating systems class for managing anything that is operation system specific.
            </summary>
            <remarks>Good design should remove the need for this function. Over time it should disappear.</remarks>
        </member>
        <member name="P:VigiothCapital.QuantTrader.OS.RamTotalCounter">
            <summary>
            Total Physical Ram on the Machine:
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.OS.RamAvailableBytes">
            <summary>
            Memory free on the machine available for use:
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.OS.CpuUsage">
            <summary>
            Total CPU usage as a percentage
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.OS.IsLinux">
            <summary>
            Global Flag :: Operating System
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.OS.IsWindows">
            <summary>
            Global Flag :: Operating System
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.OS.PathSeparation">
            <summary>
            Character Separating directories in this OS:
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.OS.DriveSpaceRemaining">
            <summary>
            Get the drive space remaining on windows and linux in MB
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.OS.DriveSpaceUsed">
            <summary>
            Get the drive space remaining on windows and linux in MB
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.OS.DriveTotalSpace">
            <summary>
            Total space on the drive
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.OS.GetDrive">
            <summary>
            Get the drive.
            </summary>
            <returns></returns>
        </member>
        <member name="P:VigiothCapital.QuantTrader.OS.ApplicationMemoryUsed">
            <summary>
            Get the RAM remaining on the machine:
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.OS.TotalPhysicalMemory">
            <summary>
            Get the RAM remaining on the machine:
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.OS.TotalPhysicalMemoryUsed">
            <summary>
            Get the RAM used on the machine:
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.OS.FreePhysicalMemory">
            <summary>
            Gets the RAM remaining on the machine
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.OS.GetServerStatistics">
            <summary>
            Gets the statistics of the machine, including CPU% and RAM
            </summary>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Statistics.AlgorithmPerformance">
            <summary>
            The <see cref="T:VigiothCapital.QuantTrader.Statistics.AlgorithmPerformance"/> class is a wrapper for <see cref="P:VigiothCapital.QuantTrader.Statistics.AlgorithmPerformance.TradeStatistics"/> and <see cref="P:VigiothCapital.QuantTrader.Statistics.AlgorithmPerformance.PortfolioStatistics"/>
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.AlgorithmPerformance.TradeStatistics">
            <summary>
            The algorithm statistics on closed trades
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.AlgorithmPerformance.PortfolioStatistics">
            <summary>
            The algorithm statistics on portfolio
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.AlgorithmPerformance.ClosedTrades">
            <summary>
            The list of closed trades
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Statistics.AlgorithmPerformance.#ctor(System.Collections.Generic.List{VigiothCapital.QuantTrader.Statistics.Trade},System.Collections.Generic.SortedDictionary{System.DateTime,System.Decimal},System.Collections.Generic.SortedDictionary{System.DateTime,System.Decimal},System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double},System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:VigiothCapital.QuantTrader.Statistics.AlgorithmPerformance"/> class
            </summary>
            <param name="trades">The list of closed trades</param>
            <param name="profitLoss">Trade record of profits and losses</param>
            <param name="equity">The list of daily equity values</param>
            <param name="listPerformance">The list of algorithm performance values</param>
            <param name="listBenchmark">The list of benchmark values</param>
            <param name="startingCapital">The algorithm starting capital</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Statistics.AlgorithmPerformance.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VigiothCapital.QuantTrader.Statistics.AlgorithmPerformance"/> class
            </summary>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Statistics.PortfolioStatistics">
            <summary>
            The <see cref="T:VigiothCapital.QuantTrader.Statistics.PortfolioStatistics"/> class represents a set of statistics calculated from equity and benchmark samples
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.PortfolioStatistics.AverageWinRate">
            <summary>
            The average rate of return for winning trades
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.PortfolioStatistics.AverageLossRate">
            <summary>
            The average rate of return for losing trades
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.PortfolioStatistics.ProfitLossRatio">
            <summary>
            The ratio of the average win rate to the average loss rate
            </summary>
            <remarks>If the average loss rate is zero, ProfitLossRatio is set to 0</remarks>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.PortfolioStatistics.WinRate">
            <summary>
            The ratio of the number of winning trades to the total number of trades
            </summary>
            <remarks>If the total number of trades is zero, WinRate is set to zero</remarks>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.PortfolioStatistics.LossRate">
            <summary>
            The ratio of the number of losing trades to the total number of trades
            </summary>
            <remarks>If the total number of trades is zero, LossRate is set to zero</remarks>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.PortfolioStatistics.Expectancy">
            <summary>
            The expected value of the rate of return
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.PortfolioStatistics.CompoundingAnnualReturn">
            <summary>
            Annual compounded returns statistic based on the final-starting capital and years.
            </summary>
            <remarks>Also known as Compound Annual Growth Rate (CAGR)</remarks>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.PortfolioStatistics.Drawdown">
            <summary>
            Drawdown maximum percentage.
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.PortfolioStatistics.TotalNetProfit">
            <summary>
            The total net profit percentage.
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.PortfolioStatistics.SharpeRatio">
            <summary>
            Sharpe ratio with respect to risk free rate: measures excess of return per unit of risk.
            </summary>
            <remarks>With risk defined as the algorithm's volatility</remarks>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.PortfolioStatistics.Alpha">
            <summary>
            Algorithm "Alpha" statistic - abnormal returns over the risk free rate and the relationshio (beta) with the benchmark returns.
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.PortfolioStatistics.Beta">
            <summary>
            Algorithm "beta" statistic - the covariance between the algorithm and benchmark performance, divided by benchmark's variance
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.PortfolioStatistics.AnnualStandardDeviation">
            <summary>
            Annualized standard deviation
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.PortfolioStatistics.AnnualVariance">
            <summary>
            Annualized variance statistic calculation using the daily performance variance and trading days per year.
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.PortfolioStatistics.InformationRatio">
            <summary>
            Information ratio - risk adjusted return
            </summary>
            <remarks>(risk = tracking error volatility, a volatility measures that considers the volatility of both algo and benchmark)</remarks>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.PortfolioStatistics.TrackingError">
            <summary>
            Tracking error volatility (TEV) statistic - a measure of how closely a portfolio follows the index to which it is benchmarked
            </summary>
            <remarks>If algo = benchmark, TEV = 0</remarks>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.PortfolioStatistics.TreynorRatio">
            <summary>
            Treynor ratio statistic is a measurement of the returns earned in excess of that which could have been earned on an investment that has no diversifiable risk
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Statistics.PortfolioStatistics.#ctor(System.Collections.Generic.SortedDictionary{System.DateTime,System.Decimal},System.Collections.Generic.SortedDictionary{System.DateTime,System.Decimal},System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double},System.Decimal,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:VigiothCapital.QuantTrader.Statistics.PortfolioStatistics"/> class
            </summary>
            <param name="profitLoss">Trade record of profits and losses</param>
            <param name="equity">The list of daily equity values</param>
            <param name="listPerformance">The list of algorithm performance values</param>
            <param name="listBenchmark">The list of benchmark values</param>
            <param name="startingCapital">The algorithm starting capital</param>
            <param name="tradingDaysPerYear">The number of trading days per year</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Statistics.PortfolioStatistics.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VigiothCapital.QuantTrader.Statistics.PortfolioStatistics"/> class
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Statistics.PortfolioStatistics.CompoundingAnnualPerformance(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Annual compounded returns statistic based on the final-starting capital and years.
            </summary>
            <param name="startingCapital">Algorithm starting capital</param>
            <param name="finalCapital">Algorithm final capital</param>
            <param name="years">Years trading</param>
            <returns>Decimal fraction for annual compounding performance</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Statistics.PortfolioStatistics.DrawdownPercent(System.Collections.Generic.SortedDictionary{System.DateTime,System.Decimal},System.Int32)">
            <summary>
            Drawdown maximum percentage.
            </summary>
            <param name="equityOverTime">The list of daily equity values</param>
            <param name="rounding">The number of decimal places to round the result</param>
            <returns>The drawdown percentage</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Statistics.PortfolioStatistics.GetAnnualPerformance(System.Collections.Generic.List{System.Double},System.Int32)">
            <summary>
            Annualized return statistic calculated as an average of daily trading performance multiplied by the number of trading days per year.
            </summary>
            <param name="performance">Dictionary collection of double performance values</param>
            <param name="tradingDaysPerYear">Trading days per year for the assets in portfolio</param>
            <remarks>May be unaccurate for forex algorithms with more trading days in a year</remarks>
            <returns>Double annual performance percentage</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Statistics.PortfolioStatistics.GetAnnualVariance(System.Collections.Generic.List{System.Double},System.Int32)">
            <summary>
            Annualized variance statistic calculation using the daily performance variance and trading days per year.
            </summary>
            <param name="performance"></param>
            <param name="tradingDaysPerYear"></param>
            <remarks>Invokes the variance extension in the MathNet Statistics class</remarks>
            <returns>Annual variance value</returns>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Statistics.StatisticsBuilder">
            <summary>
            The <see cref="T:VigiothCapital.QuantTrader.Statistics.StatisticsBuilder"/> class creates summary and rolling statistics from trades, equity and benchmark points
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Statistics.StatisticsBuilder.Generate(System.Collections.Generic.List{VigiothCapital.QuantTrader.Statistics.Trade},System.Collections.Generic.SortedDictionary{System.DateTime,System.Decimal},System.Collections.Generic.List{VigiothCapital.QuantTrader.ChartPoint},System.Collections.Generic.List{VigiothCapital.QuantTrader.ChartPoint},System.Collections.Generic.List{VigiothCapital.QuantTrader.ChartPoint},System.Decimal,System.Decimal,System.Int32)">
            <summary>
            Generates the statistics and returns the results
            </summary>
            <param name="trades">The list of closed trades</param>
            <param name="profitLoss">Trade record of profits and losses</param>
            <param name="pointsEquity">The list of daily equity values</param>
            <param name="pointsPerformance">The list of algorithm performance values</param>
            <param name="pointsBenchmark">The list of benchmark values</param>
            <param name="startingCapital">The algorithm starting capital</param>
            <param name="totalFees">The total fees</param>
            <param name="totalTransactions">The total number of transactions</param>
            <returns>Returns a <see cref="T:VigiothCapital.QuantTrader.Statistics.StatisticsResults"/> object</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Statistics.StatisticsBuilder.GetAlgorithmPerformance(System.DateTime,System.DateTime,System.Collections.Generic.List{VigiothCapital.QuantTrader.Statistics.Trade},System.Collections.Generic.SortedDictionary{System.DateTime,System.Decimal},System.Collections.Generic.SortedDictionary{System.DateTime,System.Decimal},System.Collections.Generic.List{VigiothCapital.QuantTrader.ChartPoint},System.Collections.Generic.List{VigiothCapital.QuantTrader.ChartPoint},System.Decimal)">
            <summary>
            Returns the performance of the algorithm in the specified date range
            </summary>
            <param name="fromDate">The initial date of the range</param>
            <param name="toDate">The final date of the range</param>
            <param name="trades">The list of closed trades</param>
            <param name="profitLoss">Trade record of profits and losses</param>
            <param name="equity">The list of daily equity values</param>
            <param name="pointsPerformance">The list of algorithm performance values</param>
            <param name="pointsBenchmark">The list of benchmark values</param>
            <param name="startingCapital">The algorithm starting capital</param>
            <returns>The algorithm performance</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Statistics.StatisticsBuilder.GetRollingPerformances(System.DateTime,System.DateTime,System.Collections.Generic.List{VigiothCapital.QuantTrader.Statistics.Trade},System.Collections.Generic.SortedDictionary{System.DateTime,System.Decimal},System.Collections.Generic.SortedDictionary{System.DateTime,System.Decimal},System.Collections.Generic.List{VigiothCapital.QuantTrader.ChartPoint},System.Collections.Generic.List{VigiothCapital.QuantTrader.ChartPoint},System.Decimal)">
            <summary>
            Returns the rolling performances of the algorithm
            </summary>
            <param name="firstDate">The first date of the total period</param>
            <param name="lastDate">The last date of the total period</param>
            <param name="trades">The list of closed trades</param>
            <param name="profitLoss">Trade record of profits and losses</param>
            <param name="equity">The list of daily equity values</param>
            <param name="pointsPerformance">The list of algorithm performance values</param>
            <param name="pointsBenchmark">The list of benchmark values</param>
            <param name="startingCapital">The algorithm starting capital</param>
            <returns>A dictionary with the rolling performances</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Statistics.StatisticsBuilder.GetSummary(VigiothCapital.QuantTrader.Statistics.AlgorithmPerformance,System.Decimal,System.Int32)">
            <summary>
            Returns a summary of the algorithm performance as a dictionary
            </summary>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Statistics.StatisticsBuilder.PeriodRange">
            <summary>
            Helper class for rolling statistics
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Statistics.StatisticsBuilder.GetPeriodRanges(System.Int32,System.DateTime,System.DateTime)">
            <summary>
            Gets a list of date ranges for the requested monthly period
            </summary>
            <remarks>The first and last ranges created are partial periods</remarks>
            <param name="periodMonths">The number of months in the period (valid inputs are [1, 3, 6, 12])</param>
            <param name="firstDate">The first date of the total period</param>
            <param name="lastDate">The last date of the total period</param>
            <returns>The list of date ranges</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Statistics.StatisticsBuilder.ChartPointToDictionary(System.Collections.Generic.IEnumerable{VigiothCapital.QuantTrader.ChartPoint},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Convert the charting data into an equity array.
            </summary>
            <remarks>This is required to convert the equity plot into a usable form for the statistics calculation</remarks>
            <param name="points">ChartPoints Array</param>
            <param name="fromDate">An optional starting date</param>
            <param name="toDate">An optional ending date</param>
            <returns>SortedDictionary of the equity decimal values ordered in time</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Statistics.StatisticsBuilder.CreateBenchmarkDifferences(System.Collections.Generic.SortedDictionary{System.DateTime,System.Decimal},System.Collections.Generic.SortedDictionary{System.DateTime,System.Decimal})">
            <summary>
            Creates a list of benchmark differences for the period
            </summary>
            <param name="benchmark">The benchmark values</param>
            <param name="equity">The equity values</param>
            <returns>The list of benchmark differences</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Statistics.StatisticsBuilder.EnsureSameLength(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double})">
            <summary>
            Ensures the performance list and benchmark list have the same length, padding with trailing zeros
            </summary>
            <param name="listPerformance">The performance list</param>
            <param name="listBenchmark">The benchmark list</param>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Statistics.StatisticsResults">
            <summary>
            The <see cref="T:VigiothCapital.QuantTrader.Statistics.StatisticsResults"/> class represents total and rolling statistics for an algorithm
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.StatisticsResults.TotalPerformance">
            <summary>
            The performance of the algorithm over the whole period
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.StatisticsResults.RollingPerformances">
            <summary>
            The rolling performance of the algorithm over 1, 3, 6, 12 month periods
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.StatisticsResults.Summary">
            <summary>
            Returns a summary of the algorithm performance as a dictionary
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Statistics.StatisticsResults.#ctor(VigiothCapital.QuantTrader.Statistics.AlgorithmPerformance,System.Collections.Generic.Dictionary{System.String,VigiothCapital.QuantTrader.Statistics.AlgorithmPerformance},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:VigiothCapital.QuantTrader.Statistics.StatisticsResults"/> class
            </summary>
            <param name="totalPerformance">The algorithm total performance</param>
            <param name="rollingPerformances">The algorithm rolling performances</param>
            <param name="summary">The summary performance dictionary</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Statistics.StatisticsResults.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VigiothCapital.QuantTrader.Statistics.StatisticsResults"/> class
            </summary>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Statistics.TradeStatistics">
            <summary>
            The <see cref="T:VigiothCapital.QuantTrader.Statistics.TradeStatistics"/> class represents a set of statistics calculated from a list of closed trades
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.TradeStatistics.StartDateTime">
            <summary>
            The entry date/time of the first trade
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.TradeStatistics.EndDateTime">
            <summary>
            The exit date/time of the last trade
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.TradeStatistics.TotalNumberOfTrades">
            <summary>
            The total number of trades
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.TradeStatistics.NumberOfWinningTrades">
            <summary>
            The total number of winning trades
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.TradeStatistics.NumberOfLosingTrades">
            <summary>
            The total number of losing trades
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.TradeStatistics.TotalProfitLoss">
            <summary>
            The total profit/loss for all trades (as symbol currency)
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.TradeStatistics.TotalProfit">
            <summary>
            The total profit for all winning trades (as symbol currency)
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.TradeStatistics.TotalLoss">
            <summary>
            The total loss for all losing trades (as symbol currency)
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.TradeStatistics.LargestProfit">
            <summary>
            The largest profit in a single trade (as symbol currency)
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.TradeStatistics.LargestLoss">
            <summary>
            The largest loss in a single trade (as symbol currency)
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.TradeStatistics.AverageProfitLoss">
            <summary>
            The average profit/loss (a.k.a. Expectancy or Average Trade) for all trades (as symbol currency)
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.TradeStatistics.AverageProfit">
            <summary>
            The average profit for all winning trades (as symbol currency)
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.TradeStatistics.AverageLoss">
            <summary>
            The average loss for all winning trades (as symbol currency)
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.TradeStatistics.AverageTradeDuration">
            <summary>
            The average duration for all trades
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.TradeStatistics.AverageWinningTradeDuration">
            <summary>
            The average duration for all winning trades
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.TradeStatistics.AverageLosingTradeDuration">
            <summary>
            The average duration for all losing trades
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.TradeStatistics.MaxConsecutiveWinningTrades">
            <summary>
            The maximum number of consecutive winning trades
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.TradeStatistics.MaxConsecutiveLosingTrades">
            <summary>
            The maximum number of consecutive losing trades
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.TradeStatistics.ProfitLossRatio">
            <summary>
            The ratio of the average profit per trade to the average loss per trade
            </summary>
            <remarks>If the average loss is zero, ProfitLossRatio is set to 0</remarks>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.TradeStatistics.WinLossRatio">
            <summary>
            The ratio of the number of winning trades to the number of losing trades
            </summary>
            <remarks>If the total number of trades is zero, WinLossRatio is set to zero</remarks>
            <remarks>If the number of losing trades is zero and the number of winning trades is nonzero, WinLossRatio is set to 10</remarks>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.TradeStatistics.WinRate">
            <summary>
            The ratio of the number of winning trades to the total number of trades
            </summary>
            <remarks>If the total number of trades is zero, WinRate is set to zero</remarks>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.TradeStatistics.LossRate">
            <summary>
            The ratio of the number of losing trades to the total number of trades
            </summary>
            <remarks>If the total number of trades is zero, LossRate is set to zero</remarks>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.TradeStatistics.AverageMAE">
            <summary>
            The average Maximum Adverse Excursion for all trades
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.TradeStatistics.AverageMFE">
            <summary>
            The average Maximum Favorable Excursion for all trades
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.TradeStatistics.LargestMAE">
            <summary>
            The largest Maximum Adverse Excursion in a single trade (as symbol currency)
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.TradeStatistics.LargestMFE">
            <summary>
            The largest Maximum Favorable Excursion in a single trade (as symbol currency)
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.TradeStatistics.MaximumClosedTradeDrawdown">
            <summary>
            The maximum closed-trade drawdown for all trades (as symbol currency)
            </summary>
            <remarks>The calculation only takes into account the profit/loss of each trade</remarks>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.TradeStatistics.MaximumIntraTradeDrawdown">
            <summary>
            The maximum intra-trade drawdown for all trades (as symbol currency)
            </summary>
            <remarks>The calculation takes into account MAE and MFE of each trade</remarks>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.TradeStatistics.ProfitLossStandardDeviation">
            <summary>
            The standard deviation of the profits/losses for all trades (as symbol currency)
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.TradeStatistics.ProfitLossDownsideDeviation">
            <summary>
            The downside deviation of the profits/losses for all trades (as symbol currency)
            </summary>
            <remarks>This metric only considers deviations of losing trades</remarks>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.TradeStatistics.ProfitFactor">
            <summary>
            The ratio of the total profit to the total loss
            </summary>
            <remarks>If the total profit is zero, ProfitFactor is set to zero</remarks>
            <remarks>if the total loss is zero and the total profit is nonzero, ProfitFactor is set to 10</remarks>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.TradeStatistics.SharpeRatio">
            <summary>
            The ratio of the average profit/loss to the standard deviation
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.TradeStatistics.SortinoRatio">
            <summary>
            The ratio of the average profit/loss to the downside deviation
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.TradeStatistics.ProfitToMaxDrawdownRatio">
            <summary>
            The ratio of the total profit/loss to the maximum closed trade drawdown
            </summary>
            <remarks>If the total profit/loss is zero, ProfitToMaxDrawdownRatio is set to zero</remarks>
            <remarks>if the drawdown is zero and the total profit is nonzero, ProfitToMaxDrawdownRatio is set to 10</remarks>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.TradeStatistics.MaximumEndTradeDrawdown">
            <summary>
            The maximum amount of profit given back by a single trade before exit (as symbol currency)
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.TradeStatistics.AverageEndTradeDrawdown">
            <summary>
            The average amount of profit given back by all trades before exit (as symbol currency)
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.TradeStatistics.MaximumDrawdownDuration">
            <summary>
            The maximum amount of time to recover from a drawdown (longest time between new equity highs or peaks)
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.TradeStatistics.TotalFees">
            <summary>
            The sum of fees for all trades
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Statistics.TradeStatistics.#ctor(System.Collections.Generic.IEnumerable{VigiothCapital.QuantTrader.Statistics.Trade})">
            <summary>
            Initializes a new instance of the <see cref="T:VigiothCapital.QuantTrader.Statistics.TradeStatistics"/> class
            </summary>
            <param name="trades">The list of closed trades</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Statistics.TradeStatistics.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VigiothCapital.QuantTrader.Statistics.TradeStatistics"/> class
            </summary>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Statistics.Statistics">
            <summary>
            Calculate all the statistics required from the backtest, based on the equity curve and the profit loss statement.
            </summary>
            <remarks>This is a particularly ugly class and one of the first ones written. It should be thrown out and re-written.</remarks>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.Statistics.YahooSPYBenchmark">
            <summary>
            Retrieve a static S-P500 Benchmark for the statistics calculations. Update the benchmark once per day.
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Statistics.Statistics.ChartPointToDictionary(System.Collections.Generic.IEnumerable{VigiothCapital.QuantTrader.ChartPoint})">
            <summary>
            Convert the charting data into an equity array.
            </summary>
            <remarks>This is required to convert the equity plot into a usable form for the statistics calculation</remarks>
            <param name="points">ChartPoints Array</param>
            <returns>SortedDictionary of the equity decimal values ordered in time</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable{VigiothCapital.QuantTrader.ChartPoint},System.Collections.Generic.SortedDictionary{System.DateTime,System.Decimal},System.Collections.Generic.IEnumerable{VigiothCapital.QuantTrader.ChartPoint},System.Collections.Generic.Dictionary{System.DateTime,System.Decimal},System.Decimal,System.Decimal,System.Decimal,System.Double)">
            <summary>
            Run a full set of orders and return a Dictionary of statistics.
            </summary>
            <param name="pointsEquity">Equity value over time.</param>
            <param name="profitLoss">profit loss from trades</param>
            <param name="pointsPerformance"> Daily performance</param>
            <param name="unsortedBenchmark"> Benchmark data as dictionary. Data does not need to be ordered</param>
            <param name="startingCash">Amount of starting cash in USD </param>
            <param name="totalFees">The total fees incurred over the life time of the algorithm</param>
            <param name="totalTrades">Total number of orders executed.</param>
            <param name="tradingDaysPerYear">Number of trading days per year</param>
            <returns>Statistics Array, Broken into Annual Periods</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Statistics.Statistics.ProfitLossRatio(System.Decimal,System.Decimal)">
            <summary>
            Return profit loss ratio safely avoiding divide by zero errors.
            </summary>
            <param name="averageWin"></param>
            <param name="averageLoss"></param>
            <returns></returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Statistics.Statistics.DrawdownPercent(System.Collections.Generic.SortedDictionary{System.DateTime,System.Decimal},System.Int32)">
            <summary>
            Drawdown maximum percentage.
            </summary>
            <param name="equityOverTime"></param>
            <param name="rounding"></param>
            <returns></returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Statistics.Statistics.DrawdownValue(System.Collections.Generic.SortedDictionary{System.DateTime,System.Decimal},System.Int32)">
            <summary>
            Drawdown maximum value
            </summary>
            <param name="equityOverTime">Array of portfolio value over time.</param>
            <param name="rounding">Round the drawdown statistics.</param>
            <returns>Draw down percentage over period.</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Statistics.Statistics.CompoundingAnnualPerformance(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Annual compounded returns statistic based on the final-starting capital and years.
            </summary>
            <param name="startingCapital">Algorithm starting capital</param>
            <param name="finalCapital">Algorithm final capital</param>
            <param name="years">Years trading</param>
            <returns>Decimal fraction for annual compounding performance</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Statistics.Statistics.AnnualPerformance(System.Collections.Generic.List{System.Double},System.Double)">
            <summary>
            Annualized return statistic calculated as an average of daily trading performance multiplied by the number of trading days per year.
            </summary>
            <param name="performance">Dictionary collection of double performance values</param>
            <param name="tradingDaysPerYear">Trading days per year for the assets in portfolio</param>
            <remarks>May be unaccurate for forex algorithms with more trading days in a year</remarks>
            <returns>Double annual performance percentage</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Statistics.Statistics.AnnualVariance(System.Collections.Generic.List{System.Double},System.Double)">
            <summary>
            Annualized variance statistic calculation using the daily performance variance and trading days per year.
            </summary>
            <param name="performance"></param>
            <param name="tradingDaysPerYear"></param>
            <remarks>Invokes the variance extension in the MathNet Statistics class</remarks>
            <returns>Annual variance value</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Statistics.Statistics.AnnualStandardDeviation(System.Collections.Generic.List{System.Double},System.Double)">
            <summary>
            Annualized standard deviation
            </summary>
            <param name="performance">Collection of double values for daily performance</param>
            <param name="tradingDaysPerYear">Number of trading days for the assets in portfolio to get annualize standard deviation.</param>
            <remarks>
                Invokes the variance extension in the MathNet Statistics class.
                Feasibly the trading days per year can be fetched from the dictionary of performance which includes the date-times to get the range; if is more than 1 year data.
            </remarks>
            <returns>Value for annual standard deviation</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Statistics.Statistics.Beta(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double})">
            <summary>
            Algorithm "beta" statistic - the covariance between the algorithm and benchmark performance, divided by benchmark's variance
            </summary>
            <param name="algoPerformance">Collection of double values for algorithm daily performance.</param>
            <param name="benchmarkPerformance">Collection of double benchmark daily performance values.</param>
            <remarks>Invokes the variance and covariance extensions in the MathNet Statistics class</remarks>
            <returns>Value for beta</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Statistics.Statistics.Alpha(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double},System.Double)">
            <summary>
            Algorithm "Alpha" statistic - abnormal returns over the risk free rate and the relationshio (beta) with the benchmark returns.
            </summary>
            <param name="algoPerformance">Collection of double algorithm daily performance values.</param>
            <param name="benchmarkPerformance">Collection of double benchmark daily performance values.</param>
            <param name="riskFreeRate">Risk free rate of return for the T-Bonds.</param>
            <returns>Value for alpha</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Statistics.Statistics.TrackingError(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double})">
            <summary>
            Tracking error volatility (TEV) statistic - a measure of how closely a portfolio follows the index to which it is benchmarked
            </summary>
            <remarks>If algo = benchmark, TEV = 0</remarks>
            <param name="algoPerformance">Double collection of algorithm daily performance values</param>
            <param name="benchmarkPerformance">Double collection of benchmark daily performance values</param>
            <returns>Value for tracking error</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Statistics.Statistics.InformationRatio(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double})">
            <summary>
            Information ratio - risk adjusted return
            </summary>
            <param name="algoPerformance">Collection of doubles for the daily algorithm daily performance</param>
            <param name="benchmarkPerformance">Collection of doubles for the benchmark daily performance</param>
            <remarks>(risk = tracking error volatility, a volatility measures that considers the volatility of both algo and benchmark)</remarks>
            <seealso cref="M:VigiothCapital.QuantTrader.Statistics.Statistics.TrackingError(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double})"/>
            <returns>Value for information ratio</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Statistics.Statistics.SharpeRatio(System.Collections.Generic.List{System.Double},System.Double)">
            <summary>
            Sharpe ratio with respect to risk free rate: measures excess of return per unit of risk.
            </summary>
            <remarks>With risk defined as the algorithm's volatility</remarks>
            <param name="algoPerformance">Collection of double values for the algorithm daily performance</param>
            <param name="riskFreeRate"></param>
            <returns>Value for sharpe ratio</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Statistics.Statistics.TreynorRatio(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double},System.Double)">
            <summary>
            Treynor ratio statistic is a measurement of the returns earned in excess of that which could have been earned on an investment that has no diversifiable risk
            </summary>
            <param name="algoPerformance">Collection of double algorithm daily performance values</param>
            <param name="benchmarkPerformance">Collection of double benchmark daily performance values</param>
            <param name="riskFreeRate">Risk free rate of return</param>
            <returns>double Treynor ratio</returns>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Statistics.Trade">
            <summary>
            Represents a closed trade
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.Trade.Symbol">
            <summary>
            The symbol of the traded instrument
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.Trade.EntryTime">
            <summary>
            The date and time the trade was opened
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.Trade.EntryPrice">
            <summary>
            The price at which the trade was opened (or the average price if multiple entries)
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.Trade.Direction">
            <summary>
            The direction of the trade (Long or Short)
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.Trade.Quantity">
            <summary>
            The total unsigned quantity of the trade
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.Trade.ExitTime">
            <summary>
            The date and time the trade was closed
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.Trade.ExitPrice">
            <summary>
            The price at which the trade was closed (or the average price if multiple exits)
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.Trade.ProfitLoss">
            <summary>
            The gross profit/loss of the trade (as symbol currency)
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.Trade.TotalFees">
            <summary>
            The total fees associated with the trade (always positive value) (as symbol currency)
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.Trade.MAE">
            <summary>
            The Maximum Adverse Excursion (as symbol currency)
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.Trade.MFE">
            <summary>
            The Maximum Favorable Excursion (as symbol currency)
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.Trade.Duration">
            <summary>
            Returns the duration of the trade
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.Trade.EndTradeDrawdown">
            <summary>
            Returns the amount of profit given back before the trade was closed
            </summary>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Statistics.TradeBuilder">
            <summary>
            The <see cref="T:VigiothCapital.QuantTrader.Statistics.TradeBuilder"/> class generates trades from executions and market price updates
            </summary>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Statistics.TradeBuilder.Position">
            <summary>
            Helper class to manage pending trades and market price updates for a symbol
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Statistics.TradeBuilder.#ctor(VigiothCapital.QuantTrader.Statistics.FillGroupingMethod,VigiothCapital.QuantTrader.Statistics.FillMatchingMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:VigiothCapital.QuantTrader.Statistics.TradeBuilder"/> class
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Statistics.TradeBuilder.SetLiveMode(System.Boolean)">
            <summary>
            Sets the live mode flag
            </summary>
            <param name="live">The live mode flag</param>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Statistics.TradeBuilder.ClosedTrades">
            <summary>
            The list of closed trades
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Statistics.TradeBuilder.HasOpenPosition(VigiothCapital.QuantTrader.Symbol)">
            <summary>
            Returns true if there is an open position for the symbol
            </summary>
            <param name="symbol">The symbol</param>
            <returns>true if there is an open position for the symbol</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Statistics.TradeBuilder.SetMarketPrice(VigiothCapital.QuantTrader.Symbol,System.Decimal)">
            <summary>
            Sets the current market price for the symbol
            </summary>
            <param name="symbol"></param>
            <param name="price"></param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Statistics.TradeBuilder.ProcessFill(VigiothCapital.QuantTrader.Orders.OrderEvent,System.Decimal)">
            <summary>
            Processes a new fill, eventually creating new trades
            </summary>
            <param name="fill">The new fill order event</param>
            <param name="conversionRate">The current market conversion rate into the account currency</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Statistics.TradeBuilder.AddNewTrade(VigiothCapital.QuantTrader.Statistics.Trade)">
            <summary>
            Adds a trade to the list of closed trades, capping the total number only in live mode
            </summary>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Statistics.TradeDirection">
            <summary>
            Direction of a trade
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.Statistics.TradeDirection.Long">
            <summary>
            Long direction
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.Statistics.TradeDirection.Short">
            <summary>
            Short direction
            </summary>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Statistics.FillGroupingMethod">
            <summary>
            The method used to group order fills into trades
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.Statistics.FillGroupingMethod.FillToFill">
            <summary>
            A Trade is defined by a fill that establishes or increases a position and an offsetting fill that reduces the position size.
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.Statistics.FillGroupingMethod.FlatToFlat">
            <summary>
            A Trade is defined by a sequence of fills, from a flat position to a non-zero position which may increase or decrease in quantity, and back to a flat position.
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.Statistics.FillGroupingMethod.FlatToReduced">
            <summary>
            A Trade is defined by a sequence of fills, from a flat position to a non-zero position and an offsetting fill that reduces the position size.
            </summary>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Statistics.FillMatchingMethod">
            <summary>
            The method used to match offsetting order fills
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.Statistics.FillMatchingMethod.FIFO">
            <summary>
            First In First Out fill matching method
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.Statistics.FillMatchingMethod.LIFO">
            <summary>
            Last In Last Out fill matching method
            </summary>
        </member>
        <member name="T:VigiothCapital.QuantTrader.RealTimeSynchronizedTimer">
            <summary>
            Real time timer class for precise callbacks on a millisecond resolution in a self managed thread.
            </summary>
            <remarks>Due to the way Window's system clock works the clock is only accurate to the nearest 16ms. In linux it is accurate to the millisecond.</remarks>
        </member>
        <member name="M:VigiothCapital.QuantTrader.RealTimeSynchronizedTimer.#ctor">
            <summary>
            Constructor for Real Time Event Driver:
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.RealTimeSynchronizedTimer.#ctor(System.TimeSpan,System.Action{System.DateTime})">
            <summary>
            Trigger an event callback after precisely milliseconds-lapsed. 
            This is expensive, it creates a new thread and closely monitors the loop.
            </summary>
            <param name="period">delay period between event callbacks</param>
            <param name="callback">Callback event passed the UTC time the event is intended to be triggered</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.RealTimeSynchronizedTimer.Start">
            <summary>
            Start the synchronized real time timer - fire events at start of each second or minute 
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.RealTimeSynchronizedTimer.Scanner">
            <summary>
            Scan the stopwatch for the desired millisecond delay:
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.RealTimeSynchronizedTimer.Pause">
            <summary>
            Hang the real time event:
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.RealTimeSynchronizedTimer.Resume">
            <summary>
            Resume clock
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.RealTimeSynchronizedTimer.Stop">
            <summary>
            Stop the real time timer:
            </summary>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Symbol">
            <summary>
            Represents a unique security identifier. This is made of two components,
            the unique SID and the Value. The value is the current ticker symbol while
            the SID is constant over the life of a security
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.Symbol.Empty">
            <summary>
            Represents an unassigned symbol. This is intended to be used as an
            uninitialized, default value
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Symbol.Create(System.String,VigiothCapital.QuantTrader.SecurityType,System.String,System.String)">
            <summary>
            Provides a convience method for creating a Symbol for most security types.
            This method currently does not support Option, Commodity, and Future
            </summary>
            <param name="ticker">The string ticker symbol</param>
            <param name="securityType">The security type of the ticker. If securityType == Option, then a canonical symbol is created</param>
            <param name="market">The market the ticker resides in</param>
            <param name="alias">An alias to be used for the symbol cache. Required when
            adding the same security from different markets</param>
            <returns>A new Symbol object for the specified ticker</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Symbol.CreateOption(System.String,System.String,VigiothCapital.QuantTrader.OptionStyle,VigiothCapital.QuantTrader.OptionRight,System.Decimal,System.DateTime,System.String)">
            <summary>
            Provides a convenience method for creating an option Symbol.
            </summary>
            <param name="underlying">The underlying ticker</param>
            <param name="market">The market the underlying resides in</param>
            <param name="style">The option style (American, European, ect..)</param>
            <param name="right">The option right (Put/Call)</param>
            <param name="strike">The option strike price</param>
            <param name="expiry">The option expiry date</param>
            <param name="alias">An alias to be used for the symbol cache. Required when 
            adding the same security from diferent markets</param>
            <returns>A new Symbol object for the specified option contract</returns>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Symbol.Value">
            <summary>
            Gets the current symbol for this ticker
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Symbol.ID">
            <summary>
            Gets the security identifier for this symbol
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Symbol.#ctor(VigiothCapital.QuantTrader.SecurityIdentifier,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VigiothCapital.QuantTrader.Symbol"/> class
            </summary>
            <param name="sid">The security identifier for this symbol</param>
            <param name="value">The current ticker symbol value</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Symbol.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Symbol.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Symbol.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes <paramref name="obj"/> in the sort order. Zero This instance occurs in the same position in the sort order as <paramref name="obj"/>. Greater than zero This instance follows <paramref name="obj"/> in the sort order. 
            </returns>
            <param name="obj">An object to compare with this instance. </param><exception cref="T:System.ArgumentException"><paramref name="obj"/> is not the same type as this instance. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Symbol.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Symbol.Equals(VigiothCapital.QuantTrader.Symbol)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Symbol.op_Equality(VigiothCapital.QuantTrader.Symbol,VigiothCapital.QuantTrader.Symbol)">
            <summary>
            Equals operator 
            </summary>
            <param name="left">The left operand</param>
            <param name="right">The right operand</param>
            <returns>True if both symbols are equal, otherwise false</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Symbol.op_Inequality(VigiothCapital.QuantTrader.Symbol,VigiothCapital.QuantTrader.Symbol)">
            <summary>
            Not equals operator 
            </summary>
            <param name="left">The left operand</param>
            <param name="right">The right operand</param>
            <returns>True if both symbols are not equal, otherwise false</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Symbol.op_Implicit(VigiothCapital.QuantTrader.Symbol)~System.String">
            <summary>
            Returns the symbol's string ticker
            </summary>
            <param name="symbol">The symbol</param>
            <returns>The string ticker</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Symbol.op_Implicit(System.String)~VigiothCapital.QuantTrader.Symbol">
            <summary>
            Creates symbol using string as sid
            </summary>
            <param name="ticker">The string</param>
            <returns>The symbol</returns>
        </member>
        <member name="T:VigiothCapital.QuantTrader.SymbolCache">
            <summary>
            Provides a string->Symbol mapping to allow for user defined strings to be lifted into a Symbol
            This is mainly used via the Symbol implicit operator, but also functions that create securities
            should also call Set to add new mappings
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.SymbolCache.Set(System.String,VigiothCapital.QuantTrader.Symbol)">
            <summary>
            Adds a mapping for the specified ticker
            </summary>
            <param name="ticker">The string ticker symbol</param>
            <param name="symbol">The symbol object that maps to the string ticker symbol</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.SymbolCache.GetSymbol(System.String)">
            <summary>
            Gets the Symbol object that is mapped to the specified string ticker symbol
            </summary>
            <param name="ticker">The string ticker symbol</param>
            <returns>The symbol object that maps to the specified string ticker symbol</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.SymbolCache.TryGetSymbol(System.String,VigiothCapital.QuantTrader.Symbol@)">
            <summary>
            Gets the Symbol object that is mapped to the specified string ticker symbol
            </summary>
            <param name="ticker">The string ticker symbol</param>
            <param name="symbol">The output symbol object</param>
            <returns>The symbol object that maps to the specified string ticker symbol</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.SymbolCache.GetTicker(VigiothCapital.QuantTrader.Symbol)">
            <summary>
            Gets the string ticker symbol that is mapped to the specified Symbol
            </summary>
            <param name="symbol">The symbol object</param>
            <returns>The string ticker symbol that maps to the specified symbol object</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.SymbolCache.TryGetTicker(VigiothCapital.QuantTrader.Symbol,System.String@)">
            <summary>
            Gets the string ticker symbol that is mapped to the specified Symbol
            </summary>
            <param name="symbol">The symbol object</param>
            <param name="ticker">The output string ticker symbol</param>
            <returns>The string ticker symbol that maps to the specified symbol object</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.SymbolCache.TryRemove(VigiothCapital.QuantTrader.Symbol)">
            <summary>
            Removes the mapping for the specified symbol from the cache
            </summary>
            <param name="symbol">The symbol whose mappings are to be removed</param>
            <returns>True if the symbol mapping were removed from the cache</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.SymbolCache.TryRemove(System.String)">
            <summary>
            Removes the mapping for the specified symbol from the cache
            </summary>
            <param name="ticker">The ticker whose mappings are to be removed</param>
            <returns>True if the symbol mapping were removed from the cache</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.SymbolCache.Clear">
            <summary>
            Clears the current caches
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.SymbolCache.Cache.TryGetSymbol(System.String,VigiothCapital.QuantTrader.Symbol@)">
            <summary>
            Attempts to resolve the ticker to a Symbol via the cache. If not found in the
            cache then
            </summary>
            <param name="ticker">The ticker to resolver to a symbol</param>
            <param name="symbol">The resolves symbol</param>
            <returns>True if we successfully resolved a symbol, false otherwise</returns>
        </member>
        <member name="T:VigiothCapital.QuantTrader.SymbolJsonConverter">
            <summary>
            Defines a <see cref="T:Newtonsoft.Json.JsonConverter"/> to be used when deserializing to 
            the <see cref="T:VigiothCapital.QuantTrader.Symbol"/> class.
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.SymbolJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param><param name="value">The value.</param><param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.SymbolJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param><param name="objectType">Type of the object.</param><param name="existingValue">The existing value of object being read.</param><param name="serializer">The calling serializer.</param>
            <returns>
            The object value.
            </returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.SymbolJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:VigiothCapital.QuantTrader.SymbolValueJsonConverter">
            <summary>
            Defines a <see cref="T:Newtonsoft.Json.JsonConverter"/> to be used when you only want to serialize
            the <see cref="P:VigiothCapital.QuantTrader.Symbol.Value"/> property instead of the full <see cref="T:VigiothCapital.QuantTrader.Symbol"/>
            instance
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.SymbolValueJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param><param name="value">The value.</param><param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.SymbolValueJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param><param name="objectType">Type of the object.</param><param name="existingValue">The existing value of object being read.</param><param name="serializer">The calling serializer.</param>
            <returns>
            The object value.
            </returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.SymbolValueJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Time">
            <summary>
            Time helper class collection for working with trading dates
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.Time.EndOfTime">
            <summary>
            Provides a value far enough in the future the current computer hardware will have decayed :)
            </summary>
            <value>
            new DateTime(2050, 12, 31)
            </value>
        </member>
        <member name="F:VigiothCapital.QuantTrader.Time.BeginningOfTime">
            <summary>
            Provides a value far enough in the past that can be used as a lower bound on dates
            </summary>
            <value>
            DateTime.FromOADate(0)
            </value>
        </member>
        <member name="F:VigiothCapital.QuantTrader.Time.MaxTimeSpan">
            <summary>
            Provides a value large enough that we won't hit the limit, while small enough
            we can still do math against it without checking everywhere for <see cref="F:System.TimeSpan.MaxValue"/>
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.Time.OneDay">
            <summary>
            One Day TimeSpan Period Constant
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.Time.OneHour">
            <summary>
            One Hour TimeSpan Period Constant
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.Time.OneMinute">
            <summary>
            One Minute TimeSpan Period Constant
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.Time.OneSecond">
            <summary>
            One Second TimeSpan Period Constant
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.Time.OneMillisecond">
            <summary>
            One Millisecond TimeSpan Period Constant
            </summary>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Time.DateTimeWithZone">
            <summary>
            Live charting is sensitive to timezone so need to convert the local system time to a UTC and display in browser as UTC.
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Time.DateTimeWithZone.#ctor(System.DateTime,System.TimeZoneInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:VigiothCapital.QuantTrader.Time.DateTimeWithZone"/> struct.
            </summary>
            <param name="dateTime">Date time.</param>
            <param name="timeZone">Time zone.</param>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Time.DateTimeWithZone.UniversalTime">
            <summary>
            Gets the universal time.
            </summary>
            <value>The universal time.</value>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Time.DateTimeWithZone.TimeZone">
            <summary>
            Gets the time zone.
            </summary>
            <value>The time zone.</value>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Time.DateTimeWithZone.LocalTime">
            <summary>
            Gets the local time.
            </summary>
            <value>The local time.</value>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Time.UnixTimeStampToDateTime(System.Double)">
            <summary>
            Create a C# DateTime from a UnixTimestamp
            </summary>
            <param name="unixTimeStamp">Double unix timestamp (Time since Midnight Jan 1 1970)</param>
            <returns>C# date timeobject</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Time.DateTimeToUnixTimeStamp(System.DateTime)">
            <summary>
            Convert a Datetime to Unix Timestamp
            </summary>
            <param name="time">C# datetime object</param>
            <returns>Double unix timestamp</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Time.TimeStamp">
            <summary>
            Get the current time as a unix timestamp
            </summary>
            <returns>Double value of the unix as UTC timestamp</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Time.Max(System.TimeSpan,System.TimeSpan)">
            <summary>
            Returns the timespan with the larger value
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Time.Min(System.TimeSpan,System.TimeSpan)">
            <summary>
            Returns the timespan with the smaller value
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Time.ParseDate(System.String)">
            <summary>
            Parse a standard YY MM DD date into a DateTime. Attempt common date formats 
            </summary>
            <param name="dateToParse">String date time to parse</param>
            <returns>Date time</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Time.EachDay(System.DateTime,System.DateTime)">
            <summary>
            Define an enumerable date range and return each date as a datetime object in the date range
            </summary>
            <param name="from">DateTime start date</param>
            <param name="thru">DateTime end date</param>
            <returns>Enumerable date range</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Time.EachTradeableDay(System.Collections.Generic.ICollection{VigiothCapital.QuantTrader.Securities.Security},System.DateTime,System.DateTime)">
            <summary>
            Define an enumerable date range of tradeable dates - skip the holidays and weekends when securities in this algorithm don't trade.
            </summary>
            <param name="securities">Securities we have in portfolio</param>
            <param name="from">Start date</param>
            <param name="thru">End date</param>
            <returns>Enumerable date range</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Time.EachTradeableDay(VigiothCapital.QuantTrader.Securities.Security,System.DateTime,System.DateTime)">
            <summary>
            Define an enumerable date range of tradeable dates - skip the holidays and weekends when securities in this algorithm don't trade.
            </summary>
            <param name="security">The security to get tradeable dates for</param>
            <param name="from">Start date</param>
            <param name="thru">End date</param>
            <returns>Enumerable date range</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Time.EachTradeableDay(VigiothCapital.QuantTrader.Securities.SecurityExchangeHours,System.DateTime,System.DateTime)">
            <summary>
            Define an enumerable date range of tradeable dates - skip the holidays and weekends when securities in this algorithm don't trade.
            </summary>
            <param name="exchange">The security to get tradeable dates for</param>
            <param name="from">Start date</param>
            <param name="thru">End date</param>
            <returns>Enumerable date range</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Time.EachTradeableDayInTimeZone(VigiothCapital.QuantTrader.Securities.SecurityExchangeHours,System.DateTime,System.DateTime,NodaTime.DateTimeZone,System.Boolean)">
            <summary>
            Define an enumerable date range of tradeable dates but expressed in a different time zone.
            </summary>
            <remarks>
            This is mainly used to bridge the gap between exchange time zone and data time zone for file written to disk. The returned
            enumerable of dates is gauranteed to be the same size or longer than those generated via <see cref="M:VigiothCapital.QuantTrader.Time.EachTradeableDay(System.Collections.Generic.ICollection{VigiothCapital.QuantTrader.Securities.Security},System.DateTime,System.DateTime)"/>
            </remarks>
            <param name="exchange">The exchange hours</param>
            <param name="from">The start time in the exchange time zone</param>
            <param name="thru">The end time in the exchange time zone (inclusive of the final day)</param>
            <param name="timeZone">The timezone to project the dates into (inclusive of the final day)</param>
            <param name="includeExtendedMarketHours">True to include extended market hours trading in the search, false otherwise</param>
            <returns></returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Time.TradableDate(System.Collections.Generic.IEnumerable{VigiothCapital.QuantTrader.Securities.Security},System.DateTime)">
            <summary>
            Make sure this date is not a holiday, or weekend for the securities in this algorithm.
            </summary>
            <param name="securities">Security manager from the algorithm</param>
            <param name="day">DateTime to check if trade-able.</param>
            <returns>True if tradeable date</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Time.TradeableDates(System.Collections.Generic.ICollection{VigiothCapital.QuantTrader.Securities.Security},System.DateTime,System.DateTime)">
            <summary>
            Could of the number of tradeable dates within this period.
            </summary>
            <param name="securities">Securities we're trading</param>
            <param name="start">Start of Date Loop</param>
            <param name="finish">End of Date Loop</param>
            <returns>Number of dates</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Time.GetStartTimeForTradeBars(VigiothCapital.QuantTrader.Securities.SecurityExchangeHours,System.DateTime,System.TimeSpan,System.Int32,System.Boolean)">
            <summary>
            Determines the start time required to produce the requested number of bars and the given size
            </summary>
            <param name="exchange">The exchange used to test for market open hours</param>
            <param name="end">The end time of the last bar over the requested period</param>
            <param name="barSize">The length of each bar</param>
            <param name="barCount">The number of bars requested</param>
            <param name="extendedMarketHours">True to allow extended market hours bars, otherwise false for only normal market hours</param>
            <returns>The start time that would provide the specified number of bars ending at the specified end time, rounded down by the requested bar size</returns>
        </member>
        <member name="T:VigiothCapital.QuantTrader.TimeKeeper">
            <summary>
            Provides a means of centralizing time for various time zones.
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.TimeKeeper.UtcTime">
            <summary>
            Gets the current time in UTC
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.TimeKeeper.#ctor(System.DateTime,NodaTime.DateTimeZone[])">
            <summary>
            Initializes a new instance of the <see cref="T:VigiothCapital.QuantTrader.TimeKeeper"/> class at the specified
            UTC time and for the specified time zones. Each time zone specified will cause the
            creation of a <see cref="T:VigiothCapital.QuantTrader.LocalTimeKeeper"/> to handle conversions for that time zone.
            </summary>
            <param name="utcDateTime">The initial time</param>
            <param name="timeZones">The time zones used to instantiate <see cref="T:VigiothCapital.QuantTrader.LocalTimeKeeper"/> instances.</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.TimeKeeper.#ctor(System.DateTime,System.Collections.Generic.IEnumerable{NodaTime.DateTimeZone})">
            <summary>
            Initializes a new instance of the <see cref="T:VigiothCapital.QuantTrader.TimeKeeper"/> class at the specified
            UTC time and for the specified time zones. Each time zone specified will cause the
            creation of a <see cref="T:VigiothCapital.QuantTrader.LocalTimeKeeper"/> to handle conversions for that time zone.
            </summary>
            <param name="utcDateTime">The initial time</param>
            <param name="timeZones">The time zones used to instantiate <see cref="T:VigiothCapital.QuantTrader.LocalTimeKeeper"/> instances.</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.TimeKeeper.SetUtcDateTime(System.DateTime)">
            <summary>
            Sets the current UTC time for this time keeper and the attached child <see cref="T:VigiothCapital.QuantTrader.LocalTimeKeeper"/> instances.
            </summary>
            <param name="utcDateTime">The current time in UTC</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.TimeKeeper.GetTimeIn(NodaTime.DateTimeZone)">
            <summary>
            Gets the local time in the specified time zone. If the specified <see cref="T:NodaTime.DateTimeZone"/>
            has not already been added, this will throw a <see cref="T:System.Collections.Generic.KeyNotFoundException"/>.
            </summary>
            <param name="timeZone">The time zone to get local time for</param>
            <returns>The local time in the specifed time zone</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.TimeKeeper.GetLocalTimeKeeper(NodaTime.DateTimeZone)">
            <summary>
            Gets the <see cref="T:VigiothCapital.QuantTrader.LocalTimeKeeper"/> instance for the specified time zone
            </summary>
            <param name="timeZone">The time zone whose <see cref="T:VigiothCapital.QuantTrader.LocalTimeKeeper"/> we seek</param>
            <returns>The <see cref="T:VigiothCapital.QuantTrader.LocalTimeKeeper"/> instance for the specified time zone</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.TimeKeeper.AddTimeZone(NodaTime.DateTimeZone)">
            <summary>
            Adds the specified time zone to this time keeper
            </summary>
            <param name="timeZone"></param>
        </member>
        <member name="T:VigiothCapital.QuantTrader.TimeUpdatedEventArgs">
            <summary>
            Event arguments class for the <see cref="E:VigiothCapital.QuantTrader.LocalTimeKeeper.TimeUpdated"/> event
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.TimeUpdatedEventArgs.Time">
            <summary>
            Gets the new time
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.TimeUpdatedEventArgs.TimeZone">
            <summary>
            Gets the time zone
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.TimeUpdatedEventArgs.#ctor(System.DateTime,NodaTime.DateTimeZone)">
            <summary>
            Initializes a new instance of the <see cref="T:VigiothCapital.QuantTrader.TimeUpdatedEventArgs"/> class
            </summary>
            <param name="time">The newly updated time</param>
            <param name="timeZone">The time zone of the new time</param>
        </member>
        <member name="T:VigiothCapital.QuantTrader.TimeZoneOffsetProvider">
            <summary>
            Represents the discontinuties in a single time zone and provides offsets to UTC.
            This type assumes that times will be asked in a forward marching manner.
            This type is not thread safe.
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.TimeZoneOffsetProvider.TimeZone">
            <summary>
            Gets the time zone this instances provides offsets for
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.TimeZoneOffsetProvider.#ctor(NodaTime.DateTimeZone,System.DateTime,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:VigiothCapital.QuantTrader.TimeZoneOffsetProvider"/> class
            </summary>
            <param name="timeZone">The time zone to provide offsets for</param>
            <param name="utcStartTime">The start of the range of offsets</param>
            <param name="utcEndTime">The en of the range of offsets</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.TimeZoneOffsetProvider.GetOffsetTicks(System.DateTime)">
            <summary>
            Gets the offset in ticks from this time zone to UTC, such that UTC time + offset = local time
            </summary>
            <param name="utcTime">The time in UTC to get an offset to local</param>
            <returns>The offset in ticks between UTC and the local time zone</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.TimeZoneOffsetProvider.GetNextDiscontinuity">
            <summary>
            Gets this offset provider's next discontinuity
            </summary>
            <returns>The next discontinuity in UTC ticks</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.TimeZoneOffsetProvider.ConvertFromUtc(System.DateTime)">
            <summary>
            Converts the specified <paramref name="utcTime"/> using the offset resolved from
            a call to <see cref="M:VigiothCapital.QuantTrader.TimeZoneOffsetProvider.GetOffsetTicks(System.DateTime)"/>
            </summary>
            <param name="utcTime">The time to convert from utc</param>
            <returns>The same instant in time represented in the <see cref="P:VigiothCapital.QuantTrader.TimeZoneOffsetProvider.TimeZone"/></returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.TimeZoneOffsetProvider.GetDateTimeUtcTicks(NodaTime.TimeZones.ZoneInterval)">
            <summary>
            Gets the zone interval's start time in DateTimeKind.Utc ticks
            </summary>
        </member>
        <member name="T:VigiothCapital.QuantTrader.TimeZones">
            <summary>
            Provides access to common time zones
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.TimeZones.Utc">
            <summary>
            Gets the Universal Coordinated time zone.
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.TimeZones.NewYork">
            <summary>
            Gets the time zone for New York City, USA. This is a daylight savings time zone.
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.TimeZones.EasternStandard">
            <summary>
            Get the Eastern Standard Time (EST) WITHOUT daylight savings, this is a constant -5 hour offset
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.TimeZones.London">
            <summary>
            Gets the time zone for London, England. This is a daylight savings time zone.
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.TimeZones.HongKong">
            <summary>
            Gets the time zone for Hong Kong, China.
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.TimeZones.Tokyo">
            <summary>
            Gets the time zone for Tokyo, Japan.
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.TimeZones.Rome">
            <summary>
            Gets the time zone for Rome, Italy. This is a daylight savings time zone.
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.TimeZones.Sydney">
            <summary>
            Gets the time zone for Sydney, Australia. This is a daylight savings time zone.
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.TimeZones.Vancouver">
            <summary>
            Gets the time zone for Vancouver, Canada.
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.TimeZones.Toronto">
            <summary>
            Gets the time zone for Toronto, Canada. This is a daylight savings time zone.
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.TimeZones.Chicao">
            <summary>
            Gets the time zone for Chicago, USA. This is a daylight savings time zone.
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.TimeZones.LosAngeles">
            <summary>
            Gets the time zone for Los Angeles, USA. This is a daylight savings time zone.
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.TimeZones.Phoenix">
            <summary>
            Gets the time zone for Phoenix, USA. This is a daylight savings time zone.
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.TimeZones.Auckland">
            <summary>
            Gets the time zone for Auckland, New Zealand. This is a daylight savings time zone.
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.TimeZones.Moscow">
            <summary>
            Gets the time zone for Moscow, Russia.
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.TimeZones.Madrid">
            <summary>
            Gets the time zone for Madrid, Span. This is a daylight savings time zone.
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.TimeZones.BuenosAires">
            <summary>
            Gets the time zone for Buenos Aires, Argentia.
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.TimeZones.Brisbane">
            <summary>
            Gets the time zone for Brisbane, Australia.
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.TimeZones.SaoPaulo">
            <summary>
            Gets the time zone for Sao Paulo, Brazil. This is a daylight savings time zone.
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.TimeZones.Cairo">
            <summary>
            Gets the time zone for Cairo, Egypt.
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.TimeZones.Johannesburg">
            <summary>
            Gets the time zone for Johannesburg, South Africa.
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.TimeZones.Anchorage">
            <summary>
            Gets the time zone for Anchorage, USA. This is a daylight savings time zone.
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.TimeZones.Denver">
            <summary>
            Gets the time zone for Denver, USA. This is a daylight savings time zone.
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.TimeZones.Detroit">
            <summary>
            Gets the time zone for Detroit, USA. This is a daylight savings time zone.
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.TimeZones.MexicoCity">
            <summary>
            Gets the time zone for Mexico City, Mexico. This is a daylight savings time zone.
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.TimeZones.Jerusalem">
            <summary>
            Gets the time zone for Jerusalem, Israel. This is a daylight savings time zone.
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.TimeZones.Shanghai">
            <summary>
            Gets the time zone for Shanghai, China.
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.TimeZones.Melbourne">
            <summary>
            Gets the time zone for Melbourne, Australia. This is a daylight savings time zone.
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.TimeZones.Amsterdam">
            <summary>
            Gets the time zone for Amsterdam, Netherlands. This is a daylight savings time zone.
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.TimeZones.Athens">
            <summary>
            Gets the time zone for Athens, Greece. This is a daylight savings time zone.
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.TimeZones.Berlin">
            <summary>
            Gets the time zone for Berlin, Germany. This is a daylight savings time zone.
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.TimeZones.Bucharest">
            <summary>
            Gets the time zone for Bucharest, Romania. This is a daylight savings time zone.
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.TimeZones.Dublin">
            <summary>
            Gets the time zone for Dublin, Ireland. This is a daylight savings time zone.
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.TimeZones.Helsinki">
            <summary>
            Gets the time zone for Helsinki, Finland. This is a daylight savings time zone.
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.TimeZones.Istanbul">
            <summary>
            Gets the time zone for Istanbul, Turkey. This is a daylight savings time zone.
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.TimeZones.Minsk">
            <summary>
            Gets the time zone for Minsk, Belarus.
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.TimeZones.Paris">
            <summary>
            Gets the time zone for Paris, France. This is a daylight savings time zone.
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.TimeZones.Zurich">
            <summary>
            Gets the time zone for Zurich, Switzerland. This is a daylight savings time zone.
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.TimeZones.Honolulu">
            <summary>
            Gets the time zone for Honolulu, USA. This is a daylight savings time zone.
            </summary>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Util.BusyBlockingCollection`1">
            <summary>
            A small wrapper around <see cref="T:System.Collections.Concurrent.BlockingCollection`1"/> used to communicate busy state of the items
            being processed
            </summary>
            <typeparam name="T">The item type being processed</typeparam>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Util.BusyBlockingCollection`1.WaitHandle">
            <summary>
            Gets a wait handle that can be used to wait until this instance is done
            processing all of it's item
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Util.BusyBlockingCollection`1.Count">
            <summary>
            Gets the number of items held within this collection
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Util.BusyBlockingCollection`1.IsBusy">
            <summary>
            Returns true if processing, false otherwise
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.BusyBlockingCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VigiothCapital.QuantTrader.Util.BusyBlockingCollection`1"/> class
            with a bounded capacity of <see cref="F:System.Int32.MaxValue"/>
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.BusyBlockingCollection`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:VigiothCapital.QuantTrader.Util.BusyBlockingCollection`1"/> class
            with the specified <paramref name="boundedCapacity"/>
            </summary>
            <param name="boundedCapacity">The maximum number of items allowed in the collection</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.BusyBlockingCollection`1.Add(`0)">
            <summary>
            Adds the items to this collection
            </summary>
            <param name="item">The item to be added</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.BusyBlockingCollection`1.Add(`0,System.Threading.CancellationToken)">
            <summary>
            Adds the items to this collection
            </summary>
            <param name="item">The item to be added</param>
            <param name="cancellationToken">A cancellation token to observer</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.BusyBlockingCollection`1.CompleteAdding">
            <summary>
            Marks the <see cref="T:VigiothCapital.QuantTrader.Util.BusyBlockingCollection`1"/> as not accepting any more additions
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.BusyBlockingCollection`1.GetConsumingEnumerable">
            <summary>
            Provides a consuming enumerable for items in this collection.
            </summary>
            <returns>An enumerable that removes and returns items from the collection</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.BusyBlockingCollection`1.GetConsumingEnumerable(System.Threading.CancellationToken)">
            <summary>
            Provides a consuming enumerable for items in this collection.
            </summary>
            <param name="cancellationToken">A cancellation token to observer</param>
            <returns>An enumerable that removes and returns items from the collection</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.BusyBlockingCollection`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Util.CircularQueue`1">
            <summary>
            A never ending queue that will dequeue and reenqueue the same item
            </summary>
        </member>
        <member name="E:VigiothCapital.QuantTrader.Util.CircularQueue`1.CircleCompleted">
            <summary>
            Fired when we do a full circle
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.CircularQueue`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:VigiothCapital.QuantTrader.Util.CircularQueue`1"/> class
            </summary>
            <param name="items">The items in the queue</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.CircularQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:VigiothCapital.QuantTrader.Util.CircularQueue`1"/> class
            </summary>
            <param name="items">The items in the queue</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.CircularQueue`1.Dequeue">
            <summary>
            Dequeues the next item
            </summary>
            <returns>The next item</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.CircularQueue`1.OnCircleCompleted">
            <summary>
            Event invocator for the <see cref="E:VigiothCapital.QuantTrader.Util.CircularQueue`1.CircleCompleted"/> evet
            </summary>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Util.Composer">
            <summary>
            Provides methods for obtaining exported MEF instances
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.Util.Composer.Instance">
            <summary>
            Gets the singleton instance
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.Composer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VigiothCapital.QuantTrader.Util.Composer"/> class. This type
            is a light wrapper on top of an MEF <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer"/>
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.Composer.Single``1(System.Func{``0,System.Boolean})">
            <summary>
            Gets the export matching the predicate
            </summary>
            <param name="predicate">Function used to pick which imported instance to return, if null the first instance is returned</param>
            <returns>The only export matching the specified predicate</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.Composer.AddPart``1(``0)">
            <summary>
            Adds the specified instance to this instance to allow it to be recalled via GetExportedValueByTypeName
            </summary>
            <typeparam name="T">The contract type</typeparam>
            <param name="instance">The instance to add</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.Composer.GetExportedValueByTypeName``1(System.String)">
            <summary>
            Extension method to searches the composition container for an export that has a matching type name. This function
            will first try to match on Type.AssemblyQualifiedName, then Type.FullName, and finally on Type.Name
            
            This method will not throw if multiple types are found matching the name, it will just return the first one it finds.
            </summary>
            <typeparam name="T">The type of the export</typeparam>
            <param name="typeName">The name of the type to find. This can be an assembly qualified name, a full name, or just the type's name</param>
            <returns>The export instance</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.Composer.GetExportedValues``1">
            <summary>
            Gets all exports of type T
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.Composer.Reset">
            <summary>
            Clears the cache of exported values, causing new instances to be created.
            </summary>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Util.ExpressionBuilder">
            <summary>
            Provides methods for constructing expressions at runtime
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.ExpressionBuilder.MakePropertyOrFieldSelector(System.Type,System.String)">
            <summary>
            Constructs a selector of the form: x => x.propertyOrField where x is an instance of 'type'
            </summary>
            <param name="type">The type of the parameter in the expression</param>
            <param name="propertyOrField">The name of the property or field to bind to</param>
            <returns>A new lambda expression that represents accessing the property or field on 'type'</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.ExpressionBuilder.MakePropertyOrFieldSelector``2(System.String)">
            <summary>
            Constructs a selector of the form: x => x.propertyOrField where x is an instance of 'type'
            </summary>
            <typeparam name="T">The type of the parameter in the expression</typeparam>
            <typeparam name="TProperty">The type of the property or field being accessed in the expression</typeparam>
            <param name="propertyOrField">The name of the property or field to bind to</param>
            <returns>A new lambda expression that represents accessing the property or field on 'type'</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.ExpressionBuilder.AsEnumerable(System.Linq.Expressions.Expression)">
            <summary>
            Converts the specified expression into an enumerable of expressions by walking the expression tree
            </summary>
            <param name="expression">The expression to enumerate</param>
            <returns>An enumerable containing all expressions in the input expression</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.ExpressionBuilder.OfType``1(System.Linq.Expressions.Expression)">
            <summary>
            Returns all the expressions of the specified type in the given expression tree
            </summary>
            <typeparam name="T">The type of expression to search for</typeparam>
            <param name="expression">The expression to search</param>
            <returns>All expressions of the given type in the specified expression</returns>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Util.FixedSizeQueue`1">
            <summary>
            Helper method for a limited length queue which self-removes the extra elements.
            http://stackoverflow.com/questions/5852863/fixed-size-queue-which-automatically-dequeues-old-values-upon-new-enques
            </summary>
            <typeparam name="T">The type of item the queue holds</typeparam>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Util.FixedSizeQueue`1.Limit">
            <summary>
            Max Length 
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.FixedSizeQueue`1.#ctor(System.Int32)">
            <summary>
            Create a new fixed length queue:
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.FixedSizeQueue`1.Enqueue(`0)">
            <summary>
            Enqueue a new item int the generic fixed length queue:
            </summary>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Util.FixedSizeHashQueue`1">
            <summary>
            Provides an implementation of an add-only fixed length, unique queue system
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.FixedSizeHashQueue`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:VigiothCapital.QuantTrader.Util.FixedSizeHashQueue`1"/> class
            </summary>
            <param name="size">The maximum number of items to hold</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.FixedSizeHashQueue`1.Add(`0)">
            <summary>
            Returns true if the item was added and didn't already exists
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.FixedSizeHashQueue`1.TryPeek(`0@)">
            <summary>
            Tries to inspect the first item in the queue
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.FixedSizeHashQueue`1.Dequeue">
            <summary>
            Dequeues and returns the next item in the queue
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.FixedSizeHashQueue`1.Contains(`0)">
            <summary>
            Returns true if the specified item exists in the collection
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.FixedSizeHashQueue`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.FixedSizeHashQueue`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Util.FuncParallelRunnerWorkItem">
            <summary>
            Provides a functional implementation of the <see cref="T:VigiothCapital.QuantTrader.Util.IParallelRunnerWorkItem"/> interface
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Util.FuncParallelRunnerWorkItem.IsReady">
            <summary>
            Determines if this work item is ready to be processed
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.FuncParallelRunnerWorkItem.#ctor(System.Func{System.Boolean},System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:VigiothCapital.QuantTrader.Util.FuncParallelRunnerWorkItem"/> class
            </summary>
            <param name="isReady">The IsReady function implementation</param>
            <param name="execute">The Execute function implementation</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.FuncParallelRunnerWorkItem.Execute">
            <summary>
            Executes this work item
            </summary>
            <returns>The result of execution</returns>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Util.FuncTextWriter">
            <summary>
            Provides an implementation of <see cref="T:System.IO.TextWriter"/> that redirects Write(string) and WriteLine(string)
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Util.FuncTextWriter.Encoding">
            <inheritdoc />
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.FuncTextWriter.#ctor(System.Action{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:VigiothCapital.QuantTrader.Util.FuncTextWriter"/> that will direct
            messages to the algorithm's Debug function.
            </summary>
            <param name="writer">The algorithm hosting the Debug function where messages will be directed</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.FuncTextWriter.Write(System.String)">
            <summary>
            Writes the string value using the delegate provided at construction
            </summary>
            <param name="value">The string value to be written</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.FuncTextWriter.WriteLine(System.String)">
            <summary>
            Writes the string value using the delegate provided at construction
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Util.IParallelRunnerWorkItem">
            <summary>
            Represents a work item to be processed
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Util.IParallelRunnerWorkItem.IsReady">
            <summary>
            Determines if this work item is ready to be processed
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.IParallelRunnerWorkItem.Execute">
            <summary>
            Executes this work item
            </summary>
            <returns>The result of execution</returns>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Util.LeanData">
            <summary>
            Provides methods for generating lean data file content
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.LeanData.GenerateLine(VigiothCapital.QuantTrader.Data.IBaseData,VigiothCapital.QuantTrader.SecurityType,VigiothCapital.QuantTrader.Resolution)">
            <summary>
            Converts the specified base data instance into a lean data file csv line
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.LeanData.GenerateZipFilePath(System.String,VigiothCapital.QuantTrader.Symbol,System.DateTime,VigiothCapital.QuantTrader.Resolution,VigiothCapital.QuantTrader.TickType)">
            <summary>
            Generates the full zip file path rooted in the <paramref name="dataDirectory"/>
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.LeanData.GenerateZipFilePath(System.String,System.String,VigiothCapital.QuantTrader.SecurityType,System.String,System.DateTime,VigiothCapital.QuantTrader.Resolution)">
            <summary>
            Generates the full zip file path rooted in the <paramref name="dataDirectory"/>
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.LeanData.GenerateRelativeZipFileDirectory(VigiothCapital.QuantTrader.Symbol,VigiothCapital.QuantTrader.Resolution)">
            <summary>
            Generates the relative zip directory for the specified symbol/resolution
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.LeanData.GenerateRelativeZipFilePath(VigiothCapital.QuantTrader.Symbol,System.DateTime,VigiothCapital.QuantTrader.Resolution,VigiothCapital.QuantTrader.TickType)">
            <summary>
            Generates the relative zip file path rooted in the /Data directory
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.LeanData.GenerateRelativeZipFilePath(System.String,VigiothCapital.QuantTrader.SecurityType,System.String,System.DateTime,VigiothCapital.QuantTrader.Resolution)">
            <summary>
            Generates the relative zip file path rooted in the /Data directory
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.LeanData.GenerateZipEntryName(VigiothCapital.QuantTrader.Symbol,System.DateTime,VigiothCapital.QuantTrader.Resolution,VigiothCapital.QuantTrader.TickType)">
            <summary>
            Generate's the zip entry name to hold the specified data.
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.LeanData.GenerateZipEntryName(System.String,VigiothCapital.QuantTrader.SecurityType,System.DateTime,VigiothCapital.QuantTrader.Resolution,VigiothCapital.QuantTrader.TickType)">
            <summary>
            Creates the entry name for a QC zip data file
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.LeanData.GenerateZipFileName(VigiothCapital.QuantTrader.Symbol,System.DateTime,VigiothCapital.QuantTrader.Resolution,VigiothCapital.QuantTrader.TickType)">
            <summary>
            Generates the zip file name for the specified date of data.
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.LeanData.GenerateZipFileName(System.String,VigiothCapital.QuantTrader.SecurityType,System.DateTime,VigiothCapital.QuantTrader.Resolution,System.Nullable{VigiothCapital.QuantTrader.TickType})">
            <summary>
            Creates the zip file name for a QC zip data file
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.LeanData.GetCommonTickType(VigiothCapital.QuantTrader.SecurityType)">
            <summary>
            Gets the tick type most commonly associated with the specified security type
            </summary>
            <param name="securityType">The security type</param>
            <returns>The most common tick type for the specified security type</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.LeanData.ReadSymbolFromZipEntry(VigiothCapital.QuantTrader.SecurityType,VigiothCapital.QuantTrader.Resolution,System.String)">
            <summary>
            Creates a symbol from the specified zip entry name
            </summary>
            <param name="securityType">The security type of the output symbol</param>
            <param name="resolution">The resolution of the data source producing the zip entry name</param>
            <param name="zipEntryName">The zip entry name to be parsed</param>
            <returns>A new symbol representing the zip entry name</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.LeanData.Scale(System.Decimal)">
            <summary>
            Scale and convert the resulting number to deci-cents int.
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.LeanData.ToCsv(System.Object[])">
            <summary>
            Create a csv line from the specified arguments
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.LeanData.ToCsv(VigiothCapital.QuantTrader.Data.Market.IBar)">
            <summary>
            Creates a csv line for the bar, if null fills in empty strings
            </summary>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Util.MarketHoursDatabaseJsonConverter">
            <summary>
            Provides json conversion for the <see cref="T:VigiothCapital.QuantTrader.Securities.MarketHoursDatabase"/> class
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.MarketHoursDatabaseJsonConverter.Convert(VigiothCapital.QuantTrader.Securities.MarketHoursDatabase)">
            <summary>
            Convert the input value to a value to be serialzied
            </summary>
            <param name="value">The input value to be converted before serialziation</param>
            <returns>A new instance of TResult that is to be serialzied</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.MarketHoursDatabaseJsonConverter.Convert(VigiothCapital.QuantTrader.Util.MarketHoursDatabaseJsonConverter.MarketHoursDatabaseJson)">
            <summary>
            Converts the input value to be deserialized
            </summary>
            <param name="value">The deserialized value that needs to be converted to T</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.MarketHoursDatabaseJsonConverter.Create(System.Type,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Creates an instance of the un-projected type to be deserialized
            </summary>
            <param name="type">The input object type, this is the data held in the token</param>
            <param name="token">The input data to be converted into a T</param>
            <returns>A new instance of T that is to be serialized using default rules</returns>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Util.MarketHoursDatabaseJsonConverter.MarketHoursDatabaseJson">
            <summary>
            Defines the json structure of the market-hours-database.json file
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.Util.MarketHoursDatabaseJsonConverter.MarketHoursDatabaseJson.Entries">
            <summary>
            The entries in the market hours database, keyed by <see cref="!:MarketHoursDatabase.Key.ToString"/>
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.MarketHoursDatabaseJsonConverter.MarketHoursDatabaseJson.#ctor(VigiothCapital.QuantTrader.Securities.MarketHoursDatabase)">
            <summary>
            Initializes a new instance of the <see cref="T:VigiothCapital.QuantTrader.Util.MarketHoursDatabaseJsonConverter.MarketHoursDatabaseJson"/> class
            </summary>
            <param name="database">The database instance to copy</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.MarketHoursDatabaseJsonConverter.MarketHoursDatabaseJson.Convert">
            <summary>
            Converts this json representation to the <see cref="T:VigiothCapital.QuantTrader.Securities.MarketHoursDatabase"/> type
            </summary>
            <returns>A new instance of the <see cref="T:VigiothCapital.QuantTrader.Securities.MarketHoursDatabase"/> class</returns>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Util.MarketHoursDatabaseJsonConverter.MarketHoursDatabaseEntryJson">
            <summary>
            Defines the json structure of a single entry in the market-hours-database.json file
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.Util.MarketHoursDatabaseJsonConverter.MarketHoursDatabaseEntryJson.DataTimeZone">
            <summary>
            The data's raw time zone
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.Util.MarketHoursDatabaseJsonConverter.MarketHoursDatabaseEntryJson.ExchangeTimeZone">
            <summary>
            The exchange's time zone id from the tzdb
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.Util.MarketHoursDatabaseJsonConverter.MarketHoursDatabaseEntryJson.Sunday">
            <summary>
            Sunday market hours segments
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.Util.MarketHoursDatabaseJsonConverter.MarketHoursDatabaseEntryJson.Monday">
            <summary>
            Monday market hours segments
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.Util.MarketHoursDatabaseJsonConverter.MarketHoursDatabaseEntryJson.Tuesday">
            <summary>
            Tuesday market hours segments
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.Util.MarketHoursDatabaseJsonConverter.MarketHoursDatabaseEntryJson.Wednesday">
            <summary>
            Wednesday market hours segments
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.Util.MarketHoursDatabaseJsonConverter.MarketHoursDatabaseEntryJson.Thursday">
            <summary>
            Thursday market hours segments
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.Util.MarketHoursDatabaseJsonConverter.MarketHoursDatabaseEntryJson.Friday">
            <summary>
            Friday market hours segments
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.Util.MarketHoursDatabaseJsonConverter.MarketHoursDatabaseEntryJson.Saturday">
            <summary>
            Saturday market hours segments
            </summary>
        </member>
        <member name="F:VigiothCapital.QuantTrader.Util.MarketHoursDatabaseJsonConverter.MarketHoursDatabaseEntryJson.Holidays">
            <summary>
            Holiday date strings
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.MarketHoursDatabaseJsonConverter.MarketHoursDatabaseEntryJson.#ctor(VigiothCapital.QuantTrader.Securities.MarketHoursDatabase.Entry)">
            <summary>
            Initializes a new instance of the <see cref="T:VigiothCapital.QuantTrader.Util.MarketHoursDatabaseJsonConverter.MarketHoursDatabaseEntryJson"/> class
            </summary>
            <param name="entry">The entry instance to copy</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.MarketHoursDatabaseJsonConverter.MarketHoursDatabaseEntryJson.Convert">
            <summary>
            Converts this json representation to the <see cref="T:VigiothCapital.QuantTrader.Securities.MarketHoursDatabase.Entry"/> type
            </summary>
            <returns>A new instance of the <see cref="T:VigiothCapital.QuantTrader.Securities.MarketHoursDatabase.Entry"/> class</returns>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Util.ParallelRunnerController">
            <summary>
            Controller type used to schedule <see cref="T:VigiothCapital.QuantTrader.Util.IParallelRunnerWorkItem"/> instances
            to run on dedicated runner threads
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Util.ParallelRunnerController.WaitHandle">
            <summary>
            Gets a wait handle that can be used to wait for this controller
            to finish all scheduled work
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.ParallelRunnerController.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:VigiothCapital.QuantTrader.Util.ParallelRunnerController"/> class
            </summary>
            <param name="threadCount">The number of dedicated threads to spin up</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.ParallelRunnerController.Schedule(VigiothCapital.QuantTrader.Util.IParallelRunnerWorkItem)">
            <summary>
            Schedules the specified work item to run
            </summary>
            <param name="workItem">The work item to schedule</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.ParallelRunnerController.Start(System.Threading.CancellationToken)">
            <summary>
            Starts this instance of <see cref="T:VigiothCapital.QuantTrader.Util.ParallelRunnerController"/>.
            This method is indempotent
            </summary>
            <param name="token">The cancellation token</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.ParallelRunnerController.ProcessHoldQueue(System.Threading.CancellationToken)">
            <summary>
            Processes the internal hold queue checking to see if work
            items are ready to run
            </summary>
            <param name="token">The cancellation token</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.ParallelRunnerController.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Util.ParallelRunnerWorker">
            <summary>
            Runner type used to run <see cref="T:VigiothCapital.QuantTrader.Util.IParallelRunnerWorkItem"/>
            </summary>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Util.ParallelRunnerWorker.WaitHandle">
            <summary>
            Gets a wait handle that can be used to wait for this worker
            to finished all work in the queue, that is, when <see cref="P:System.Collections.Concurrent.BlockingCollection`1.IsAddingCompleted"/> equals true.
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.ParallelRunnerWorker.#ctor(VigiothCapital.QuantTrader.Util.ParallelRunnerController,System.Collections.Concurrent.BlockingCollection{VigiothCapital.QuantTrader.Util.IParallelRunnerWorkItem})">
            <summary>
            Initialzies a new instance of the <see cref="T:VigiothCapital.QuantTrader.Util.ParallelRunnerWorker"/> class
            </summary>
            <param name="controller">The controller instance used to reschedule work items</param>
            <param name="queue">The work queue where this worker will source the work items</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.ParallelRunnerWorker.Start(System.Threading.CancellationToken)">
            <summary>
            Starts a new thread to process the work queue.
            This method is indempotent.
            </summary>
            <param name="token">The cancellation token</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.ParallelRunnerWorker.ThreadEntry(System.Threading.CancellationToken)">
            <summary>
            Main entry point for the worker thread
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.ParallelRunnerWorker.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Util.ColorJsonConverter">
            <summary>
            A <see cref="T:Newtonsoft.Json.JsonConverter" /> implementation that serializes a <see cref="T:System.Drawing.Color" /> as a string.
            If Color is empty, string is also empty and vice-versa. Meaning that color is autogen.
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.ColorJsonConverter.Convert(System.Drawing.Color)">
            <summary>
            Converts a .NET Color to a hexadecimal as a string
            </summary>
            <param name="value">The input value to be converted before serialization</param>
            <returns>Hexadecimal number as a string. If .NET Color is null, returns default #000000</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.ColorJsonConverter.Convert(System.String)">
            <summary>
            Converts the input string to a .NET Color object
            </summary>
            <param name="value">The deserialized value that needs to be converted to T</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.ColorJsonConverter.HexToInt(System.String)">
            <summary>
            Converts hexadecimal number to integer
            </summary>
            <param name="hexValue">Hexadecimal number</param>
            <returns>Integer representation of the hexadecimal</returns>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Util.SecurityExtensions">
            <summary>
            Provides useful infrastructure methods to the <see cref="T:VigiothCapital.QuantTrader.Securities.Security"/> class.
            These are added in this way to avoid mudding the class's public API
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.SecurityExtensions.IsInternalFeed(VigiothCapital.QuantTrader.Securities.Security)">
            <summary>
            Determines if all subscriptions for the security are internal feeds
            </summary>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Util.SecurityIdentifierJsonConverter">
            <summary>
            A <see cref="T:Newtonsoft.Json.JsonConverter"/> implementation that serializes a <see cref="T:VigiothCapital.QuantTrader.SecurityIdentifier"/> as a string
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.SecurityIdentifierJsonConverter.Convert(VigiothCapital.QuantTrader.SecurityIdentifier)">
            <summary>
            Converts as security identifier to a string
            </summary>
            <param name="value">The input value to be converted before serialziation</param>
            <returns>A new instance of TResult that is to be serialzied</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.SecurityIdentifierJsonConverter.Convert(System.String)">
            <summary>
            Converts the input string to a security identifier
            </summary>
            <param name="value">The deserialized value that needs to be converted to T</param>
            <returns>The converted value</returns>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Util.TypeChangeJsonConverter`2">
            <summary>
            Provides a base class for a <see cref="T:Newtonsoft.Json.JsonConverter"/> that serializes a
            an input type as some other output type
            </summary>
            <typeparam name="T">The type to be serialized</typeparam>
            <typeparam name="TResult">The output serialized type</typeparam>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.TypeChangeJsonConverter`2.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param><param name="objectType">Type of the object.</param><param name="existingValue">The existing value of object being read.</param><param name="serializer">The calling serializer.</param>
            <returns>
            The object value.
            </returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.TypeChangeJsonConverter`2.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param><param name="value">The value.</param><param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.TypeChangeJsonConverter`2.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.TypeChangeJsonConverter`2.Create(System.Type,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Creates an instance of the un-projected type to be deserialized
            </summary>
            <param name="type">The input object type, this is the data held in the token</param>
            <param name="token">The input data to be converted into a T</param>
            <returns>A new instance of T that is to be serialized using default rules</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.TypeChangeJsonConverter`2.Convert(`0)">
            <summary>
            Convert the input value to a value to be serialzied
            </summary>
            <param name="value">The input value to be converted before serialziation</param>
            <returns>A new instance of TResult that is to be serialzied</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.TypeChangeJsonConverter`2.Convert(`1)">
            <summary>
            Converts the input value to be deserialized
            </summary>
            <param name="value">The deserialized value that needs to be converted to T</param>
            <returns>The converted value</returns>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Util.LinqExtensions">
            <summary>
            Provides more extension methods for the enumerable types
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.LinqExtensions.ToDictionary``2(System.Linq.ILookup{``0,``1})">
            <summary>
            Creates a dictionary multimap from the lookup.
            </summary>
            <typeparam name="K">The key type</typeparam>
            <typeparam name="V">The value type</typeparam>
            <param name="lookup">The ILookup instance to convert to a dictionary</param>
            <returns>A dictionary holding the same data as 'lookup'</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.LinqExtensions.ToDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Creates a dictionary enumerable of key value pairs
            </summary>
            <typeparam name="K">The key type</typeparam>
            <typeparam name="V">The value type</typeparam>
            <param name="enumerable">The IEnumerable of KeyValuePair instances to convert to a dictionary</param>
            <returns>A dictionary holding the same data as the enumerable</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.LinqExtensions.ToReadOnlyDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Creates a new read-only dictionary from the key value pairs
            </summary>
            <typeparam name="K">The key type</typeparam>
            <typeparam name="V">The value type</typeparam>
            <param name="enumerable">The IEnumerable of KeyValuePair instances to convert to a dictionary</param>
            <returns>A read-only dictionary holding the same data as the enumerable</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.LinqExtensions.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a new <see cref="T:System.Collections.Generic.HashSet`1"/> from the elements in the specified enumerable
            </summary>
            <typeparam name="T">The item type in the hash set</typeparam>
            <param name="enumerable">The items to be placed into the enumerable</param>
            <returns>A new <see cref="T:System.Collections.Generic.HashSet`1"/> containing the items in the enumerable</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.LinqExtensions.ToHashSet``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Creates a new <see cref="T:System.Collections.Generic.HashSet`1"/> from the elements in the specified enumerable
            </summary>
            <typeparam name="T">The item type of the source enumerable</typeparam>
            <typeparam name="TResult">The type of the items in the output <see cref="T:System.Collections.Generic.HashSet`1"/></typeparam>
            <param name="enumerable">The items to be placed into the enumerable</param>
            <param name="selector">Selects items from the enumerable to be placed into the <see cref="T:System.Collections.Generic.HashSet`1"/></param>
            <returns>A new <see cref="T:System.Collections.Generic.HashSet`1"/> containing the items in the enumerable</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.LinqExtensions.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.ISet{``0})">
            <summary>
            Produces the set difference of two sequences by using the default equality comparer to compare values.
            </summary>
            <typeparam name="T">The type of the elements of the input sequences.</typeparam>
            <param name="enumerable">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements that are not also in <paramref name="set"/> will be returned.</param>
            <param name="set">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.</param>
            <returns>A sequence that contains the set difference of the elements of two sequences.</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.LinqExtensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns true if the specified enumerable is null or has no elements
            </summary>
            <typeparam name="T">The enumerable's item type</typeparam>
            <param name="enumerable">The enumerable to check for a value</param>
            <returns>True if the enumerable has elements, false otherwise</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.LinqExtensions.DefaultIfEmpty``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},``1)">
            <summary>
            Performs the specified selector before calling DefaultIfEmpty. This is just short hand for Select(selector).DefaultIfEmpty(defaultValue)
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.LinqExtensions.Median``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets the median value in the collection
            </summary>
            <typeparam name="T">The item type in the collection</typeparam>
            <param name="enumerable">The enumerable of items to search</param>
            <returns>The median value, throws InvalidOperationException if no items are present</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.LinqExtensions.Median``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Gets the median value in the collection
            </summary>
            <typeparam name="T">The item type in the collection</typeparam>
            <typeparam name="TProperty">The type of the value selected</typeparam>
            <param name="collection">The collection of items to search</param>
            <param name="selector">Function used to select a value from collection items</param>
            <returns>The median value, throws InvalidOperationException if no items are present</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.LinqExtensions.BinarySearch``2(System.Collections.Generic.IList{``0},``1,System.Func{``1,``0,System.Int32})">
            <summary>
            Performs a binary search on the specified collection.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
            <typeparam name="TSearch">The type of the searched item.</typeparam>
            <param name="list">The list to be searched.</param>
            <param name="value">The value to search for.</param>
            <param name="comparer">The comparer that is used to compare the value with the list items.</param>
            <returns>The index of the item if found, otherwise the bitwise complement where the value should be per MSDN specs</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.LinqExtensions.BinarySearch``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Performs a binary search on the specified collection.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
            <param name="list">The list to be searched.</param>
            <param name="value">The value to search for.</param>
            <returns>The index of the item if found, otherwise the bitwise complement where the value should be per MSDN specs</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.LinqExtensions.BinarySearch``1(System.Collections.Generic.IList{``0},``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Performs a binary search on the specified collection.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
            <param name="list">The list to be searched.</param>
            <param name="value">The value to search for.</param>
            <param name="comparer">The comparer that is used to compare the value with the list items.</param>
            <returns>The index of the item if found, otherwise the bitwise complement where the value should be per MSDN specs</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.LinqExtensions.Memoize``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Wraps the specified enumerable such that it will only be enumerated once
            </summary>
            <typeparam name="T">The enumerable's element type</typeparam>
            <param name="enumerable">The source enumerable to be wrapped</param>
            <returns>A new enumerable that can be enumerated multiple times without re-enumerating the source enumerable</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.LinqExtensions.Range``1(``0,``0,System.Func{``0,``0},System.Boolean)">
            <summary>
            Produces the an enumerable of the range of values between start and end using the specified
            incrementing function
            </summary>
            <typeparam name="T">The enumerable item type</typeparam>
            <param name="start">The start of the range</param>
            <param name="end">The end of the range, non-inclusive by default</param>
            <param name="incrementer">The incrementing function, with argument of the current item</param>
            <param name="includeEndPoint">True to emit the end point, false otherwise</param>
            <returns>An enumerable of the range of items between start and end</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.LinqExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Creates a new enumerable that will be distinct by the specified property selector
            </summary>
            <typeparam name="T">The enumerable item type</typeparam>
            <typeparam name="TPropery">The selected property type</typeparam>
            <param name="enumerable">The source enumerable</param>
            <param name="selector">The property selector</param>
            <returns>A filtered enumerable distinct on the selected property</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.LinqExtensions.GroupAdjacentBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})">
            <summary>
            Groups adjacent elements of the enumerale using the specified grouper function
            </summary>
            <typeparam name="T">The enumerable item type</typeparam>
            <param name="enumerable">The source enumerable to be grouped</param>
            <param name="grouper">A function that accepts the previous value and the next value and returns
            true if the next value belongs in the same group as the previous value, otherwise returns false</param>
            <returns>A new enumerable of the groups defined by grouper. These groups don't have a key
            and are only grouped by being emitted separately from this enumerable</returns>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Util.MemoizingEnumerable`1">
            <summary>
            Defines an enumerable that can be enumerated many times while
            only performing a single enumeration of the root enumerable
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.MemoizingEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:VigiothCapital.QuantTrader.Util.MemoizingEnumerable`1"/> class
            </summary>
            <param name="enumerable">The source enumerable to be memoized</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.MemoizingEnumerable`1.#ctor(System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:VigiothCapital.QuantTrader.Util.MemoizingEnumerable`1"/> class
            </summary>
            <param name="enumerator">The source enumerator to be memoized</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.MemoizingEnumerable`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.MemoizingEnumerable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Util.NullStringValueConverter`1">
            <summary>
            Converts the string "null" into a new instance of T.
            This converter only handles deserialization concerns.
            </summary>
            <typeparam name="T">The output type of the converter</typeparam>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.NullStringValueConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.NullStringValueConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            The object value.
            </returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.NullStringValueConverter`1.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Util.ObjectActivator">
            <summary>
            Provides methods for creating new instances of objects
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.ObjectActivator.GetActivator(System.Type)">
            <summary>
            Fast Object Creator from Generic Type:
            Modified from http://rogeralsing.com/2008/02/28/linq-expressions-creating-objects/
            </summary>
            <remarks>This assumes that the type has a parameterless, default constructor</remarks>
            <param name="dataType">Type of the object we wish to create</param>
            <returns>Method to return an instance of object</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.ObjectActivator.Clone(System.Object)">
            <summary>
            Clones the specified instance using reflection
            </summary>
            <param name="instanceToClone">The instance to be cloned</param>
            <returns>A field/property wise, non-recursive clone of the instance</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.ObjectActivator.Clone``1(``0)">
            <summary>
            Clones the specified instance and then casts it to T before returning
            </summary>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Util.ReaderWriterLockSlimExtensions">
            <summary>
            Provides extension methods to make working with the <see cref="T:System.Threading.ReaderWriterLockSlim"/> class easier
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.ReaderWriterLockSlimExtensions.Read(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Opens the read lock
            </summary>
            <param name="readerWriterLockSlim">The lock to open for read</param>
            <returns>A disposable reference which will release the lock upon disposal</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.ReaderWriterLockSlimExtensions.Write(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Opens the write lock
            </summary>
            <param name="readerWriterLockSlim">The lock to open for write</param>
            <returns>A disposale reference which will release thelock upon disposal</returns>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Util.IReadOnlyRef`1">
            <summary>
            Represents a read-only reference to any value, T
            </summary>
            <typeparam name="T">The data type the reference points to</typeparam>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Util.IReadOnlyRef`1.Value">
            <summary>
            Gets the current value this reference points to
            </summary>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Util.Ref`1">
            <summary>
            Represents a reference to any value, T
            </summary>
            <typeparam name="T">The data type the reference points to</typeparam>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.Ref`1.#ctor(System.Func{`0},System.Action{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:VigiothCapital.QuantTrader.Util.Ref`1"/> class
            </summary>
            <param name="getter">A function delegate to get the current value</param>
            <param name="setter">A function delegate to set the current value</param>
        </member>
        <member name="P:VigiothCapital.QuantTrader.Util.Ref`1.Value">
            <summary>
            Gets or sets the value of this reference
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.Ref`1.AsReadOnly">
            <summary>
            Returns a read-only version of this instance
            </summary>
            <returns>A new instance with read-only semantics/gaurantees</returns>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Util.Ref">
            <summary>
            Provides some helper methods that leverage C# type inference
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.Ref.Create``1(System.Func{``0},System.Action{``0})">
            <summary>
            Creates a new <see cref="T:VigiothCapital.QuantTrader.Util.Ref`1"/> instance
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.Ref.CreateReadOnly``1(System.Func{``0})">
            <summary>
            Creates a new <see cref="T:VigiothCapital.QuantTrader.Util.IReadOnlyRef`1"/> instance
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.Ref.Create``1(``0)">
            <summary>
            Creates a new <see cref="T:VigiothCapital.QuantTrader.Util.Ref`1"/> instance by closing over
            the specified <paramref name="initialValue"/> variable.
            NOTE: This won't close over the variable input to the function,
            but rather a copy of the variable. This reference will use it's
            own storage.
            </summary>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Util.SingleValueListConverter`1">
            <summary>
            Reads json and always produces a List, even if the input has just an object
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.SingleValueListConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object. If the instance is not a list then it will
            be wrapped in a list
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.SingleValueListConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object. If the JSON represents a singular instance, it will be returned
            in a list.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.SingleValueListConverter`1.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns><c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Util.VersionHelper">
            <summary>
            Provides methods for dealing with lean assembly versions
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.VersionHelper.IsOlderVersion(System.String)">
            <summary>
            Determines whether or not the specified version is older than this instance
            </summary>
            <param name="version">The version to compare</param>
            <returns>True if the specified version is older, false otherwise</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.VersionHelper.IsNewerVersion(System.String)">
            <summary>
            Determines whether or not the specified version is newer than this instance
            </summary>
            <param name="version">The version to compare</param>
            <returns>True if the specified version is newer, false otherwise</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.VersionHelper.IsEqualVersion(System.String)">
            <summary>
            Determines whether or not the specified version is equal to this instance
            </summary>
            <param name="version">The version to compare</param>
            <returns>True if the specified version is equal, false otherwise</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.VersionHelper.IsNotEqualVersion(System.String)">
            <summary>
            Determines whether or not the specified version is not equal to this instance
            </summary>
            <param name="version">The version to compare</param>
            <returns>True if the specified version is not equal, false otherwise</returns>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.VersionHelper.CompareVersions(System.String,System.String)">
            <summary>
            Compares two versions
            </summary>
            <returns>1 if the left version is after the right, 0 if they're the same, -1 if the left is before the right</returns>
        </member>
        <member name="T:VigiothCapital.QuantTrader.Util.XElementExtensions">
            <summary>
            Provides extension methods for the XML to LINQ types
            </summary>
        </member>
        <member name="M:VigiothCapital.QuantTrader.Util.XElementExtensions.Get``1(System.Xml.Linq.XElement,System.String)">
            <summary>
            Gets the value from the element and converts it to the specified type.
            </summary>
            <typeparam name="T">The output type</typeparam>
            <param name="element">The element to access</param>
            <param name="name">The attribute name to access on the element</param>
            <returns>The converted value</returns>
        </member>
    </members>
</doc>
